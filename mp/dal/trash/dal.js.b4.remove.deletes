/**
 * Created by user on 7/7/15.
 */


/**
 *
 *
 *
 *CRUD items on any node
 * sync across AS
 * forward CRUD ... check if neighbors are not linked
 */

    /*
    what are versions?
    last time the database or repo was updated
    we sync by comparing versions on a connection
    node a version for b is 0, while b is 50, so b will send all data between 0, and 50
    version in db is based on updated time ... so any record modified is sent

    i do not know if we need c, u d methods, they can call sync and send sync requests
     */

var sh = require('shelpers').shelpers;

function BasicClass() {
    var p = BasicClass.prototype;
    p = this;
    var self = this;
    p.method1 = function method1(url, appCode) {
    }

    p.proc = function debugLogger() {
        if ( self.silent == true) {
            return
        }
        sh.sLog(arguments)
    }
}

exports.BasicClass = BasicClass;


function MySQLDataRepo() {
    var p = MySQLDataRepo.prototype;
    p = this;
    var self = this;
    p.init = function init(url, appCode) {
        self.version = 0;
    }

    p.getVersion = function getVersion( ) {
        return self.version;
    }

    p.getRecords = function getRecords(toVersion, fxGotRecords ) {
        fxGotRecords([], self.version);
        return 0;
    }

    p.create = function getVersion( records, fx ) {
        return 0;
    }

    p.update = function getVersion( records, fx ) {
        return 0;
    }

    p.fxDelete = function fxDelete( records, fx) {
        return 0;
    };

    p.upsert = function upsert( records, fx) {
        return 0;
    }
    /**
     * time_rand_id <-- this becomes new version
     * source
     *
     */
    p.checkSources = function () {
        //need col
    }


    p.proc = function debugLogger() {
        if ( self.silent == true) {
            return
        }
        sh.sLog(arguments)
    }
}

exports.MySQLDataRepo = MySQLDataRepo;


function Actor() {
    var p = Actor.prototype;
    p = this;
    var self = this;

    var types = {};
    types.SyncVersion = 'sync_version';
    types.SyncGet = 'SyncGet';
    types.SyncSummary = 'SyncSummary';
    types.CrudCreate = 'CrudCreate';
    types.CrudUpdate = 'CrudUpdate =';
    types.CrudDelete = 'CrudDelete';

    p.init = function method1(url, appCode) {
        self.linksTo = [];
        self.peers = self.linksTo;
        url = sh.dv(url, {});
        self.settings = url;
        if ( self.settings.name == null ) {
            self.settings.name = self.name;
        }
        self.data = {};
        self.data.port;

        self.dictPeers = {};

        self.types = {};
        self.types = types;

        self.repo = new MySQLDataRepo();
        self.repo.init();

        self.settings.peers= [];
    }

    p.linkTo = function linkTo(peer) {
        self.linksTo.push(peer)
        self.dictPeers[peer.name]=peer;
        self.settings.peers.push(peer.name);
    }

    function defineUtils() {
        p.utils = {};
        /**
         * I need to forward a crud request to a pper
         * but i do not want to duplicate them
         * so go through my peers, if any of my peers, links to this node, then do not forward it
         *
         * IE, b links to a, c and d
         * requests from c, should go to a,
         * requests from a should go to c and d
         * @param x
         */
        p.utils.forwardRequestsTo = function (nodeFrom) {
            var sendTo = [];
            sh.each(self.peers, function (i, peer) {
                if (peer == nodeFrom) {
                    return;
                }
                if (peer.settings.peers.indexOf(nodeFrom.name)) {
                    return;
                }
                sendTo.push(peer);
            });

            return sendTo;
        }
    }
    defineUtils();

    function defineConnection() {
        p.connectToOthers = function connectToOthers(url, appCode) {
            var sockets = [];
            self.sockets = sockets;
            sh.each( self.linksTo, function (i,peer) {
                var url = 'http://localhost'+':'+ peer.settings.port;
                console.log('trying to reach', peer.name, url)
                var socket = require('socket.io-client')(url);
                socket.on('connect', function(){
                    console.log('connected', peer.name, self.name )
                    self.con.sync()
                });
                socket.on('event', function(data){});
                socket.on('disconnect', function(){});
                sockets.push(socket);
                peer.data.url= url;
                peer.socket = socket;
                //TODO: get stored version from db
            });
        }


        p.start = function start( ) {
            // self.linksTo.push(url)

            // Setup basic express server
            var express = require('express');
            var app = express();
            var server = require('http').createServer(app);
            var io = require('socket.io')(server);
            var port = process.env.PORT || 3000;
            port = sh.dv(  self.settings.port, port);
            console.log(self.name, port );
            server.listen(port, function () {
                console.log('Server listening at port %d', port, self.name);
                self.connectToOthers();
            });
            // Routing
            app.use(express.static(__dirname + '/public'));
            // Chatroom
            // usernames which are currently connected to the chat
            var usernames = {};
            var numUsers = 0;
            io.on('connection', function (socket) {
                self.socket = socket;
                self.con.defineCrud();
                self.con.defineSync();
                var addedUser = false;
                // when the client emits 'new message', this listens and executes
                socket.on('new message', function (data) {
                    // we tell the client to execute 'new message'
                    socket.broadcast.emit('new message', {
                        username: socket.username,
                        message: data
                    });
                });
                // when the client emits 'add user', this listens and executes
                socket.on('add user', function (username) {
                    // we store the username in the socket session for this client
                    socket.username = username;
                    // add the client's username to the global list
                    usernames[username] = username;
                    ++numUsers;
                    addedUser = true;
                    socket.emit('login', {
                        numUsers: numUsers
                    });
                    // echo globally (all clients) that a person has connected
                    socket.broadcast.emit('user joined', {
                        username: socket.username,
                        numUsers: numUsers
                    });
                });
                // when the client emits 'typing', we broadcast it to others
                socket.on('typing', function () {
                    socket.broadcast.emit('typing', {
                        username: socket.username
                    });
                });



                // when the client emits 'stop typing', we broadcast it to others
                socket.on('stop typing', function () {
                    socket.broadcast.emit('stop typing', {
                        username: socket.username
                    });
                });
                // when the user disconnects.. perform this
                socket.on('disconnect', function () {
                    // remove the username from global usernames list
                    if (addedUser) {
                        delete usernames[socket.username];
                        --numUsers;
                        // echo globally that this client has left
                        socket.broadcast.emit('user left', {
                            username: socket.username,
                            numUsers: numUsers
                        });
                    }
                });
            });

        }
    }
    defineConnection();

    function defineProcesses() {

        p.con = {};
        p.connection = p.con;

        p.connection.startConnection = function startconnect() {
            // self.sycned=false;
        }

        /**
         * Send my version all data to peers
         * send up to
         */
        p.con.sync = function () {
            self.settings.version = self.repo.getVersion();
            sh.each( self.peers, function (i,peer) {
                peer.socket.emit(types.SyncVersion, {
                    version:peer.version,
                    name:self.name,
                    data:sh.clone(self.settings)
                });
            });
        };


        p.con.defineSync = function () {
            self.socket.on(types.SyncVersion, function (data) {
                var peer = self.dictPeers[data.data.name];

                var vFrom = data.data.version;
                var vTo = self.settings.version;
                console.log('sync test', types.SyncVersion, self.name,
                    self.settings.version ,'from', data.name, data.data.version);

                if ( vFrom > vTo ) {
                    self.proc('need to update', sh.q(peer.name), 'is at ', vFrom, 'I am at', vTo)
                    peer.socket.emit(types.SyncGet, {
                        from:vFrom,
                        to:vTo,
                        name:self.name,
                        data:sh.clone(self.settings)
                    });
                }
            });

            //TODO: should we sync all peers? ... no b/c if new node comes up it needs what
            //it needs
            //handle sync requests
            self.socket.on(types.SyncGet, function (data) {
                var peer = self.dictPeers[data.data.name];

                var vFrom = data.data.version;
                var vTo = self.settings.version;
                console.log('Got sync request from ', sh.q(peer.name), '---', types.SyncGet, sh.q(self.name),
                    self.settings.version ,'from', data.name, data.data.version);

                //self.proc(self.name, 'need to get', vFrom)

                //callback will update records
                var records = self.repo.getRecords(vTo, function onSendRecords(records, version) {

                    self.proc(sh.q(self.name)+':', 'sending ', version, 'to', sh.q(peer.name), records.length)
                    peer.socket.emit(types.SyncSummary, {
                        from:vFrom,
                        to:version,
                        name:self.name,
                        data:sh.clone(self.settings),
                        newVersion:version,
                        records:records //TODO: enforce maximum size
                    });
                });
                //if ( vFrom > vTo ) {
                //}
            });

            self.socket.on(types.SyncSummary, function (data) {
                var peer = self.dictPeers[data.data.name];

                var vTo = data.data.version;
                var vFrom = peer.version;
                console.log(  types.SyncSummary, self.name,
                    self.settings.version ,'from', data.name,vFrom, '-->', vTo);

                self.proc('brought', 'connection', sh.paren(sh.q(self.name)+','+sh.q(peer.name))
                , 'up to version', vTo)

                self.repo.upsert(data.records);
                peer.version = vTo;
            });


        }

        /**
         * C R U D L
         * Create method stubs for each action
         * update the version after each update, forward processing to repo
         *
         * method to send creation
         * method to handle creation
         */
        p.connection.defineCrud = function defineCrud() {

            p.connection.create = function create(records, version) {
                version = sh.dv(version, self.repo.getVersion());
                self.settings.version = version;
                sh.each( self.peers, function (i,peer) {
                    peer.socket.emit(types.CrudCreate, {
                        version:self.settings.version,
                        name:self.name,
                        records:records,
                        data:sh.clone(self.settings)
                    });
                });
            }

            self.socket.on(types.CrudCreate, function (data) {
                var peer = self.dictPeers[data.data.name];
                var vTo = data.data.version;
                self.proc(self.name, types.CrudCreate, vTo)
                //callback will update records
                self.repo.create(data.records)
            });

            p.connection.update = function update(records, version) {
                version = sh.dv(version, self.repo.getVersion());
                self.settings.version = version;
                sh.each( self.peers, function (i,peer) {
                    peer.socket.emit(types.CrudUpdate, {
                        version:self.settings.version,
                        name:self.name,
                        records:records,
                        data:sh.clone(self.settings)
                    });
                });
            }

            self.socket.on(types.CrudUpdate, function (data) {
                var peer = self.dictPeers[data.data.name];
                var vTo = data.data.version;
                self.proc(self.name, types.CrudUpdate, vTo)
                //callback will update records
                self.repo.update(data.records)
            });




            p.connection.delete = function fxDelete(records, version) {
                version = sh.dv(version, self.repo.getVersion());
                self.settings.version = version;
                sh.each( self.peers, function (i,peer) {
                    peer.socket.emit(types.CrudDelete, {
                        version:self.settings.version,
                        name:self.name,
                        records:records,
                        data:sh.clone(self.settings)
                    });
                });
            }

            self.socket.on(types.CrudDelete, function (data) {
                var peer = self.dictPeers[data.data.name];
                var vTo = data.data.version;
                self.proc(self.name, types.CrudDelete, vTo)
                //callback will update records
                self.repo.fxDelete(data.records)
            });


        }


        /**
         * TODO: implement smark check-sum feature
         */
        p.connection.verify = function defineVerify() {
            //divert to sync
            self.con.sync();
        }

    }

    defineProcesses();



    p.proc = function debugLogger() {
        if ( self.silent == true) {
            return
        }
        sh.sLog(arguments)
    }
}

exports.Actor = Actor;


function TopologyHelper() {
    var p = TopologyHelper.prototype;
    p = this;
    var self = this;
    p.loadTop = function loadTop(topology, dictNodeSettings) {

        var count =  0
        function createNewActor(name, settings) {
            var actor = new Actor()
            actor.name = name
            actor.init();
            actor.settings.port = count + 3000;
            count++
            return actor;
        }

        var dictNodes = {};
        var allNodes = [];

        sh.each(topology, function linkPairs(i,topSet) {

            var a = topSet[0];
            var b = topSet[1];

            if ( dictNodes[a]==null) {
                var nodeA = createNewActor(a)
                allNodes.push(nodeA)
                dictNodes[a] = nodeA;
            } else {
                nodeA =  dictNodes[a]
            }

            if ( sh.isArray(b) == false ) {
                b = [b];
            }

            sh.each(b, function createBNodes(i,b){
                if ( dictNodes[b]!=null) {
                    nodeB = dictNodes[b];
                } else {
                    var nodeB = createNewActor(b)
                    allNodes.push(nodeB)
                    dictNodes[b] = nodeB;
                }
                //make copies to simulate real modeling
                nodeA.linkTo(sh.clone(nodeB));
                nodeB.linkTo(sh.clone(nodeA));
            })

        })


        /* //full mesh
         sh.each(allNodes, function linkAllNodes(i,nodeFrom){
         nodeFrom.settings.port = 3000 + i;
         sh.each(allNodes, function linkAllNodes(i,nodeTo){
         if ( nodeFrom == nodeTo ) { return }
         nodeFrom.linkTo(nodeTo)
         nodeTo.linkTo(nodeFrom)
         })
         });
         */

        sh.each(dictNodeSettings, function addNode(i, nodeSettings) {
            var node = dictNodes[i];
            if ( nodeSettings.version != null )
            node.repo.version = nodeSettings.version;
        });


        sh.each(allNodes, function linkAllNodes(i,nodeFrom){
            nodeFrom.start();
        })

    }

    p.proc = function debugLogger() {
        if ( self.silent == true) {
            return
        }
        sh.sLog(arguments)
    }
}

exports.TopologyHelper = TopologyHelper;

if (module.parent == null) {
    var t = new TopologyHelper();
    'a --> b --> [c,d]'
    var top = [
        ['a', 'b'],
        ['b', ['c', 'd']]
    ]
    var dict = {}
    dict['a'] = {}
    dict['a'].version = 1;
    t.loadTop(top, dict);
}
