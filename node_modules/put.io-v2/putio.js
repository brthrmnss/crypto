var https = require('https');
var http = require('http');
var url = require('url');

var PutIO = function (token) {
    var api = 'https://api.put.io/v2/';
    var self = this;

    if ( token == null ) {
        token = 'P9XWZFBE'
    }
    var token = token;

    //https = http
    //api = 'http://localhost:8888/https://api.put.io/v2/';

    self.oauth_token = token

    var p = PutIO.prototype;
    p.testConnectivity = function testConnectivity(fxCallback) {
        self.files.list(0, fxCallback)
    }

    var def = function (variable, defaultValue) {
        return (variable === undefined) ? defaultValue : variable;
    };
    var need = function (variable) {
        if (variable === undefined) {
            throw 'missingParameter';
        }
    };

    var request = function (method, path, query, callback, contentLength) {
        if (typeof query == 'function') {
            callback = query;
            query = {};
        }
        console.log('>>>input', arguments)
        callback = def(callback, noop);
        query = def(query, {});
        query.oauth_token = token;

        var options = url.parse(api + path);
        options.method = method;
        options.path += url.format({'query': query});

        if ( contentLength ) {
            options.headers = {
               // 'Content-Type': 'application/x-www-form-urlencoded',
               // 'Content-Length': 0
            }
        }

        https.request(options,function (res) {
            var data = '';

            res.on('data', function (chunk) {
                data += chunk;
            });
            res.on('end', function () {
                try {
                    callback(JSON.parse(data));
                } catch (e) {
                    //console.error('Error', 'put.io',options)
                    //console.log('>>>input', arguments)
                    setTimeout( function showErrorLater() {
                        var seperate = '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
                        console.error(seperate)
                        console.error('for request', arguments)

                        console.error(seperate)
                        console.error(e.stack )

                        if (data.indexOf(badProxy) == -1) {
                            unknownMessage = false;
                            console.error('putio callback',badProxy)
                        }
                        if (data.indexOf(badVerification) == -1) {
                            unknownMessage = false;
                            console.error('putio callback',badVerification)
                        }


                        console.error(seperate)
                        console.error(e)
                    }, 500)
                    var unknownMessage = true
                    var badVerification = "putio.js The server could not verify that you are authorized to access the URL requested.  You either supplied the wrong credentials (e.g. a bad password), or your browser doesn't understand how to supply the credentials required."
                    var badProxy = 'The browser (or proxy) sent a request that this server could not understand.'

                    //if (unknownMessage) {
                       // console.log('putio callback ...', data )
                    //}
                    if(self.jsonParsingCallback){
                        self.jsonParsingCallback(e, data);
                    }
                }
            });
        }).end();
    };
    var get = function (path, query, callback) {
        request('GET', path, query, callback);
    };
    var post = function (path, query, callback, contentLength) {
        request('POST', path, query, callback, contentLength);
    };

    var noop = function () {
    };

    this.files = {};
    this.files.list = function (parent_id, callback) {
        parent_id = def(parent_id, 0);

        get('files/list', {'parent_id': parent_id}, callback);
    };
    this.files.search = function (query, page, callback) {
        need(query);
        page = def(page, 1);

        get('files/search/' + encodeURIComponent(query) + '/page/' + page, callback);
    };
    this.files.createFolder = function (name, parent_id, callback) {
        need(name);
        parent_id = def(parent_id, 0);

        post('files/create-folder', {'parent_id': parent_id, 'name': name}, callback);
    };
    this.files.get = function (id, callback) {
        need(id);

        get('files/' + id, callback);
    };
    this.files.delete = function (file_ids, callback) {
        need(file_ids);

        if (typeof(file_ids) == 'object') {
            file_ids = file_ids.join(',');
        }
        var query = {}
        query.file_ids = file_ids;
        request2('POST', 'files/delete', query, callback);

        //post('files/delete', {'file_ids': file_ids}, callback, true);
    };
    this.files.rename = function (file_id, name, callback) {
        need(file_id);
        need(name);

        post('files/rename', {'file_id': file_id, 'name': name}, callback);
    };
    this.files.move = function (file_ids, parent_id, callback) {
        need(file_ids);
        need(parent_id);

        if (typeof(file_ids) == 'object') {
            file_ids = file_ids.join(',');
        }

        post('files/move', {'file_ids': file_ids, 'parent_id': parent_id}, callback);
    };
    this.files.make_mp4 = function (id, callback) {
        need(id);

        post('files/' + id + '/mp4', callback);
    };
    this.files.get_mp4 = function (id, callback) {
        need(id);

        get('files/' + id + '/mp4', callback);
    };
    this.files.download = function (id) {
        need(id);

        return api + 'files/' + id + '/download?oauth_token=' + token;
    };


    /**
     * Will download multiple files in folder, if link is a file
     * @param id
     * @returns {string}
     */
    this.files.downloadSafe = function (id, callback) {
        need(id);
        need(callback)
        var fxCallbackGet = function fxCallbackGet(data) {
            var content_type = data.file.content_type;
            if (content_type == 'application/x-directory') {
                //console.log('dir')
                var files = [];
                var fxGetListCallback = function fxGetListCallback(data) {
                    //console.log('dir2')
                    for (var i in data.files) {
                        //console.log(data.files[i].name);
                        var download_url = self.files.download(data.files[i].id);
                        files.push(download_url);

                        //.console.log(download_url);
                    }
                    callback(files)
                    return;
                }
                self.files.list(id, fxGetListCallback)
                return;
            }
            //console.log(data.file.content_type)
            callback(self.files.download(id))
        }
        self.files.get(id, fxCallbackGet)
        //return api + 'files/' + id + '/download?oauth_token=' + token;
    };

    /**
     * Will download multiple files in folder, if link is a file
     * @param id
     * @returns {string}
     */
    this.files.downloadSafe = function (id, callback) {
        need(id);
        need(callback)
        var fxCallbackGet = function fxCallbackGet(data) {
            var content_type = data.file.content_type;
            if (content_type == 'application/x-directory') {
                //console.log('dir')
                var files = [];
                var fxGetListCallback = function fxGetListCallback(data) {
                    //console.log('dir2')
                    for (var i in data.files) {
                        //console.log(data.files[i].name);
                        var download_url = self.files.download(data.files[i].id);
                        files.push(download_url);

                        //.console.log(download_url);
                    }
                    callback(files)
                    return;
                }
                self.files.list(id, fxGetListCallback)
                return;
            }
            //console.log(data.file.content_type)
            callback(self.files.download(id))
        }
        self.files.get(id, fxCallbackGet)
        //return api + 'files/' + id + '/download?oauth_token=' + token;
    };

    this.transfers = {};
    this.transfers.list = function (callback) {

        get('transfers/list', callback);
    };
    this.login = function (u, p, callback) {
        need(u);
        need(p);
        var query = {}
        query.name = u
        query.password = p
        //query.next = '/'
        request2('POST', 'https://api.put.io/login', query, callback);
    };
    this.transfers.uploadMagnetX = function (torrent, callback) {
        need(torrent);
        request2('POST', 'transfers/info', {'urls': [torrent]}, callback);
    };
    this.transfers.addMulti = function (url, callback, save_parent_id, extract, email_when_complete) {
        need(url);
        need(callback);
        var req = {}
        req.url = url
        req.save_parent_id = ""
        req.extract = false
        req.email_when_complete = false
        req = JSON.stringify([req]) //array around req
        var query = {'urls': req}
        console.log('addMulti')
        // return;
        // query = JSON.stringify(query)
      /*  var callback2 = function ab (data) {
           console.log('add multi complete')
            console.log(callback)
            callback(back)
        }*/
        request2('POST', 'transfers/add-multi', query, callback, false);
    };
    this.transfers.uploadMagnet = function (torrent, callback) {
        need(torrent);
        var fxCallback = function uploadMagnet_fxCallback(data) {
            /**
             { disk_avail: 52895259885,
               ret:
                [ { dltype: 1,
                    file_size: 0,
                    human_size: 'unknown',
                    name: 'Paid to Think: A Leader\'s Toolkit for Redefining Your Future',
                    type_name: 'folder',
                    url: 'magnet:?xt=urn:btih:918cac36c8286f99d117ecafb49819ab0f860ff2&dn=Paid+to+Think%3A+A+Leader%27s+Toolkit+for+Redefining+Your+Future&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.istole.it%3A6969&tr=udp%3A%2F%2Ftracker.ccc.de%3A80&tr=udp%3A%2F%2Fopen.demonii.com%3A1337' } ],
               status: 'OK' }
             */
            console.log('done');
            var uploads = data.ret;
            var files = []
            for (var i in data.ret) {
                var file = uploads[i]
                var req = {}
                req.url = decodeURIComponent(file.url)
                req.save_parent_id = ""
                req.extract = false
                req.email_when_complete = false
                files.push(req);
                self.transfers.addMulti(req.url, callback)
                //.console.log(download_url);
            }

            //urls:[{"url":"magnet:?x","save_parent_id":"","extract":false,"email_when_complete":false}]

        }
        var obj = {'urls': [torrent]}
        var obj = {'urls': torrent}
        var query = JSON.stringify(obj)
        query = obj
        request2('POST', 'transfers/info', query, fxCallback);
    };

    /**
     * Modified post request, that sends proper form encoded output
     * @param method
     * @param path
     * @param query
     * @param callback
     * @param nesting
     */
    var request2 = function (method, path, query, callback, nesting) {
        if (typeof query == 'function') {
            callback = query;
            query = {};
        }
        callback = def(callback, noop);
        query = def(query, {});
        query.oauth_token = token;

        var querystring = require('querystring');
        var qs = require('qs');
        if (nesting == false) {
            // Build the post string from an object
            var post_data = querystring.stringify(query);
        }
        else {
            var post_data = qs.stringify(query);
            //var post_data = encodeURIComponent(query)
        }
        var options = url.parse(api + path);
        if (path.indexOf('https') == 0) {
            options - url.parse(path)
            delete query['oauth_token'] //= token;
            console.log(query)
        }
        //post_data = post_data2
        options.method = method;
        //options.path += url.format({'query': query});

        options.headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': post_data.length
        }
        console.log('post', post_data)
        var post_req = https.request(options, function (res) {
            var data = '';

            res.on('data', function (chunk) {
                data += chunk;
            });
            res.on('end', function () {
                try {
                    callback(JSON.parse(data));
                } catch (e) {
                    console.log(path, options)
                    console.log('post', post_data)
                    var unknownMessage = false
                    var badVerification = "The server could not verify that you are authorized to access the URL requested.  You either supplied the wrong credentials (e.g. a bad password), or your browser doesn't understand how to supply the credentials required."
                    var badProxy = 'The browser (or proxy) sent a request that this server could not understand.'
                    if (data.indexOf(badProxy) != -1) {
                        unknownMessage = false;
                        console.log(badProxy)
                    }
                    if (data.indexOf(badVerification) != -1) {
                        unknownMessage = false;
                        console.log(badVerification)
                    }
                    if (unknownMessage) {
                        console.log(data)
                    }
                    console.log(e)
                    console.log(callback)
                    // console.log(res)
                }
            });
        })
        //post_data = 'urls:magnet%3A%3Fxt%3Durn%3Abtih%3A9a861c245a5eeeee66c6ec0c8be407538b33fb67%26dn%3DThe%2BLeader%255C%2527s%2BHandbook%253A%2BMaking%2BThings%2BHappen%2BGetting%2BThings%2BDone%26tr%3Dudp%253A%252F%252Ftracker.openbittorrent.com%253A80%26tr%3Dudp%253A%252F%252Ftracker.publicbt.com%253A80%26tr%3Dudp%253A%252F%252Ftracker.istole.it%253A6969%26tr%3Dudp%253A%252F%252Ftracker.ccc.de%253A80%26tr%3Dudp%253A%252F%252Fopen.demonii.com%253A1337'
        //post_data = 'urls:magnet:?xt=urn:btih:9a861c245a5eeeee66c6ec0c8be407538b33fb67&dn=The+Leader%5C%27s+Handbook%3A+Making+Things+Happen+Getting+Things+Done&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.istole.it%3A6969&tr=udp%3A%2F%2Ftracker.ccc.de%3A80&tr=udp%3A%2F%2Fopen.demonii.com%3A1337'
        //post_data = 'urls=magnet%3A%3Fxt%3Durn%3Abtih%3A9a861c245a5eeeee66c6ec0c8be407538b33fb67%26dn%3DThe%2BLeader%255C%2527s%2BHandbook%253A%2BMaking%2BThings%2BHappen%2BGetting%2BThings%2BDone%26tr%3Dudp%253A%252F%252Ftracker.openbittorrent.com%253A80%26tr%3Dudp%253A%252F%252Ftracker.publicbt.com%253A80%26tr%3Dudp%253A%252F%252Ftracker.istole.it%253A6969%26tr%3Dudp%253A%252F%252Ftracker.ccc.de%253A80%26tr%3Dudp%253A%252F%252Fopen.demonii.com%253A1337'
        post_req.write(post_data);
        post_req.end();
    };
    this.transfers.add = function (path, parent_id, extract, callback) {
        need(path);
        parent_id = def(parent_id, 0);
        extract = def(extract, false);

        post('transfers/add', {'url': path, 'save_parent_id': parent_id, 'extract': extract}, callback);
    };
    this.transfers.get = function (id, callback) {
        need(id);

        get('transfers/' + id, callback);
    };
    this.transfers.cancel = function (transfer_ids, callback) {
        need(transfer_ids);

        if (typeof(transfer_ids) == 'object') {
            transfer_ids = transfer_ids.join(',');
        }
        var query = {}
        query.transfer_ids = transfer_ids;
        request2('POST', 'transfers/cancel', query, callback);
        //post('transfers/cancel', {'transfer_ids': transfer_ids}, callback);
    };

    this.friends = {};
    this.friends.list = function (callback) {

        get('friends/list', callback);
    };
    this.friends.waitingRequests = function (callback) {

        get('friends/waiting-requests', callback);
    };
    this.friends.request = function (username, callback) {
        need(username);

        post('friends/' + encodeURIComponent(username) + '/request', callback);
    };
    this.friends.deny = function (username, callback) {
        need(username);

        post('friends/' + encodeURIComponent(username) + '/deny', callback);
    };
};

module.exports = PutIO;
