{
  "name": "express-rest",
  "version": "1.0.4",
  "description": "Simple REST for Node with Express",
  "main": "expressRest.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/alancnet/express-rest.git"
  },
  "keywords": [
    "express",
    "rest",
    "webapi"
  ],
  "author": {
    "name": "Alan Colon"
  },
  "license": "Apache-2",
  "bugs": {
    "url": "https://github.com/alancnet/express-rest/issues"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "nodeunit": "~0.9.0",
    "grunt-contrib-nodeunit": "~0.4.1",
    "grunt-contrib-watch": "~0.6.1",
    "nodeunit-express": "0.0.1",
    "express": "~4.8.7"
  },
  "dependencies": {
    "concat-stream": "^1.4.6",
    "string_decoder": "^0.10.31"
  },
  "readme": "express-rest\n=========\n![Build](https://api.travis-ci.org/alancnet/express-rest.svg)\n![Downloads](http://img.shields.io/npm/dm/express-rest.svg) \n![Version](http://img.shields.io/npm/v/express-rest.svg) \n![License](http://img.shields.io/npm/l/express-rest.svg) \n\nSimplest possible REST implementation for Node / Express.\n\n  - Uses familiar syntax for those who use express\n  - Handles serialization and content-types *(XML coming soon)*\n  - Embrace HTTP\n\n\nInstallation\n--------------\n\n```sh\nnpm install express-rest\n```\n\nUsage\n-----\n\n```javascript\nvar express = require('express'),\n    expressRest = require('express-rest');\n\nvar app = express();\nvar rest = expressRest(app);\n\nvar records = [\n    {value: 'Apple'},\n    {value: 'Banana'}\n];\n\nrest.get('/api/food', function(req, rest) {\n    rest.ok(records);\n});\n\nrest.get('/api/food/:id', function(req, rest) {\n    var record = records[req.params.id];\n    if (record) rest.ok(record);\n    else rest.notFound();\n});\n\nrest.put('/api/food/:id', function(req, rest) {\n    records[req.params.id] = req.body;\n    return rest.accepted('/api/food/' + encodeURI(req.params.id));\n});\n\nrest.post('/api/food', function(req, rest) {\n    records.push(req.body);\n    rest.created('/api/food/' + (records.length - 1));\n});\n\nrest.delete('/api/food/:id', function(req, rest) {\n    delete records[req.params.id];\n    rest.gone();\n})\n\n\napp.listen();\n```\n\nCustom MIME Types\n--------------------\n\n```javascript\nvar express = require('express'),\n    expressRest = require('express-rest');\n\nvar app = express();\nvar rest = expressRest(app, {\n    serializers: {\n        'text/yaml': {\n            deserialize: function(req, rest, next) {\n                req.body = object;\n                next();\n            },\n            serialize: function(req, rest, next) {\n                rest.send(buffer);\n                next();\n            }\n        }\n    }\n});\n```\n\n\n### Response functions\n\nEach HTTP response code is conveniently wrapped in an appropriately named function.\nDepending on the status, the parameter can be **body** (state object to be returned),\n**location** (URI to the resource), or **message** (string to describe an error).\n\n|Function                       |#  |Status Text                    |Parameter\n|-------------------------------|---|-------------------------------|---------|\n|continue                       |100|Continue                       |         |\n|switchingProtocols             |101|Switching Protocols            |         |\n|checkpoint                     |103|Checkpoint                     |         |\n|ok                             |200|OK                             |Body     |\n|created                        |201|Created                        |Location |\n|accepted                       |202|Accepted                       |Location |\n|nonAuthoritativeInformation    |203|Non Authoritative Information  |Body     |\n|noContent                      |204|No Content                     |         |\n|resetContent                   |205|Reset Content                  |         |\n|partialContent                 |206|Partial Content                |Body     |\n|multipleChoices                |300|Multiple Choices               |Body     |\n|movedPermanently               |301|Moved Permanently              |Location |\n|found                          |302|Found                          |Location | \n|seeOther                       |303|See Other                      |Location |\n|notModified                    |304|Not Modified                   |         |\n|switchProxy                    |306|Switch Proxy                   |         |\n|temporaryRedirect              |307|Temporary Redirect             |Location |\n|resumeIncomplete               |308|Resume Incomplete              |Body     |\n|badRequest                     |400|Bad Request                    |Message  |\n|unauthorized                   |401|Unauthorized                   |Message  |\n|paymentRequired                |402|Payment Required               |Message  |\n|forbidden                      |403|Forbidden                      |Message  |\n|notFound                       |404|Not Found                      |Message  |\n|methodNotAllowed               |405|Method Not Allowed             |Message  |\n|notAcceptable                  |406|Not Acceptable                 |Message  |\n|proxyAuthenticationRequired    |407|Proxy Authentication Required  |Message  |\n|requestTimeout                 |408|Request Timeout                |Message  |\n|conflict                       |409|Conflict                       |Message  |\n|gone                           |410|Gone                           |Message  |\n|lengthRequired                 |411|Length Required                |Message  |\n|preconditionFailed             |412|Precondition Failed            |Message  |\n|requestEntityTooLarge          |413|Request Entity Too Large       |Message  |\n|requestURITooLong              |414|Request URI Too Long           |Message  |\n|unsupportedMediaType           |415|Unsupported Media Type         |Message  |\n|requestedRangeNotSatisfiable   |416|Requested Range Not Satisfiable|Message  |\n|expectationFailed              |417|Expectation Failed             |Message  |\n|internalServerError            |500|Internal Server Error          |Message  |\n|notImplemented                 |501|Not Implemented                |Message  |\n|badGateway                     |502|Bad Gateway                    |Message  |\n|serviceUnavailable             |503|Service Unavailable            |Message  |\n|gatewayTimeout                 |504|Gateway Timeout                |Message  |\n|httpVersionNotSupported        |505|HTTP Version Not Supported     |Message  |\n|networkAuthenticationRequired  |511|Network Authentication Required|Message  |\n\n",
  "readmeFilename": "README.md",
  "_id": "express-rest@1.0.4",
  "dist": {
    "shasum": "553f4fcc8a040cb91743c8abff62c2f799f81409"
  },
  "_from": "express-rest@",
  "_resolved": "https://registry.npmjs.org/express-rest/-/express-rest-1.0.4.tgz"
}
