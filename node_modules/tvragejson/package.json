{
  "name": "tvragejson",
  "description": "A node.js API for the TVRage web services.",
  "version": "0.2.0",
  "author": {
    "name": "Andreas Savvides",
    "email": "andreas@editd.com"
  },
  "main": "index",
  "respository": {
    "type": "git",
    "url": "https://github.com/AnSavvides/tvrage-json.git"
  },
  "keywords": [
    "tvrage",
    "json",
    "api"
  ],
  "dependencies": {
    "xml2js": "0.2.3",
    "util": "0.4.9",
    "request": "2.12.0"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-watch": "~0.5.1"
  },
  "engines": {
    "node": ">=0.8.15"
  },
  "readme": "[![Build Status](https://travis-ci.org/AnSavvides/tvrage-json.png)](https://travis-ci.org/AnSavvides/tvrage-json)\n[![Stories in Ready](https://badge.waffle.io/AnSavvides/tvrage-json.png)](http://waffle.io/AnSavvides/tvrage-json)\n[![Dependency Status](https://david-dm.org/AnSavvides/tvrage-json.png)](https://david-dm.org/AnSavvides/tvrage-json)\n\n# TV Rage JSON\n\nA node.js API for the [TVRage web services](http://services.tvrage.com/info.php?page=main); as per the name, all responses are JSON.\n\n# Installation\n\n`npm install tvragejson`\n\n# Usage\n\n```js\nvar TVRage = require(\"tvragejson\");\n\n// Search for a show by name, returning the first match.\nTVRage.search(\"The Big Bang Theory\", function(err, response) {\n    if (!err) {\n        console.log(response[\"Results\"][\"show\"][0]);\n    }\n});\n\n// Get information for a particular show - in this case we\n// are using the show ID for \"The Big Bang Theory\".\nTVRage.search(\"8511\", function(err, response) {\n    if (!err) {\n        console.log(response);\n    }\n});\n\n```\n\n# Supported methods\n* `search` - Search shows by name\n* `fullSearch` - Full search for shows by name\n* `showInfo` - Show info based on a show id that can be acquired via `search` or `fullSearch`\n* `fullShowInfo` - Full show info based on a show id that can be acquired via `search` or `fullSearch`\n* `episodeList` - Episode list based on a show id that can be acquired via the `search` or `fullSearch`\n* `episode_info` - Episode info based on a show id (attainable via `search` or `fullSearch`) and an episode (attainable via `episodeList`)\n* `fullShowList` - Full TV show list\n* `fullSchedule` - Full TV schedule based on a two letter country representation as defined by [ISO 3166](http://www.iso.org/iso/country_codes)\n\n# What's next?\n* Add some tests\n* Add ability to optionally return XML as served from TVRage without converting to JSON\n\n# Contributing\nAll contributions are welcome, feel free to fork `master`, make your changes and open a pull request.\n\n[Grunt](http://gruntjs.com/) is used with the [JSHint](https://github.com/gruntjs/grunt-contrib-jshint) and [Watch](https://github.com/gruntjs/grunt-contrib-watch) plugins.\nTo get up and running with grunt you need to do the following:\n\n* Install the [Grunt Command Line Interface tools](https://github.com/gruntjs/grunt-cli):\n`npm install -g grunt-cli`\n* Install the current Grunt version local to this project (so ensure you make this within the project's directory):\n`npm install grunt --save-dev`\n\nUpon making any code changes, make sure you run `grunt test` from within the project's directory to verify that there are no errors (this is done using the JSHint plugin mentioned above) - if there are any errors, make all necessary changes before opening a pull request.\n\n# Changelog\n\n# v0.2.0\n- Fix ECONNRESET from the TvRage API\n- The callback now takes two arguments, `err` and `result`\n- Drop node.js 0.6 support\n\n# v0.1.3\n- Added a more elaborate .gitignore\n\n# v0.1.2\n- Added Grunt\n\n# v0.1.1\n- Added David dependency management badge\n\n# License\nLicensed under the [MIT License](http://opensource.org/licenses/MIT)",
  "readmeFilename": "README.md",
  "_id": "tvragejson@0.2.0",
  "dist": {
    "shasum": "4d1a2ebe86ec658e5196027082133ea9b8689f26"
  },
  "_from": "tvragejson@",
  "_resolved": "https://registry.npmjs.org/tvragejson/-/tvragejson-0.2.0.tgz"
}
