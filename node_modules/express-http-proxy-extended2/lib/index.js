'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _expressHttpProxy = require('express-http-proxy');

var _expressHttpProxy2 = _interopRequireDefault(_expressHttpProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function rewriteCookiesIntecptor(rsp, data, req, res, domain, path) {
  // intercept the response from server before sending it back to the client
  if (rsp.headers.hasOwnProperty('set-cookie')) {
    var existingCookies = rsp.headers['set-cookie'];

    if (!Array.isArray(existingCookies)) {
      existingCookies = [existingCookies];
    }

    var rewrittenCookies = existingCookies.map(function (cookie) {
      var newCookie = cookie.replace(/(Domain)=[a-z\.-_]*?(;|$)/gi, '$1=' + domain + '$2').replace(/(Path)=[a-z\.-_]*?(;|$)/gi, '$1=' + path + '$2');

      if (!req.connection.encrypted) {
        newCookie = newCookie.replace(/;\s*?(Secure)/i, '');
      }

      return newCookie;
    });

    res.set('set-cookie', rewrittenCookies);
  }
}

function expresHttpProxyExtended(host) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var _options$cookieDomain = options.cookieDomain;
  var cookieDomain = _options$cookieDomain === undefined ? '' : _options$cookieDomain;
  var _options$cookiePath = options.cookiePath;
  var cookiePath = _options$cookiePath === undefined ? '/' : _options$cookiePath;
  var rewriteCookies = options.rewriteCookies;
  var _intercept = options.intercept;

  var forwardOptions = _objectWithoutProperties(options, ['cookieDomain', 'cookiePath', 'rewriteCookies', 'intercept']); // eslint-disable-line max-len

  var o = _extends({}, forwardOptions, {
    intercept: function intercept(rsp, data, req, res, callback) {
      if (rewriteCookies === true) {
        rewriteCookiesIntecptor(rsp, data, req, res, cookieDomain, cookiePath);
      }
      if (typeof _intercept === 'function') {
        _intercept(rsp, data, req, res, callback);
      } else {
        callback(null, data);
      }
    }
  });

  return (0, _expressHttpProxy2.default)(host, o);
}
exports.default = expresHttpProxyExtended;
module.exports = exports['default'];