function Pagination() {
    var self = this;
    var p = this;

    /**
     * load
     * @param items - All the items for the list
     * @param limit - The number of items to display per page
     */
    p.load = function load(items, limit) {
        self.allItems = items;
        self.numPages = Math.ceil(items.length / limit);
        self.currentPage = 0;
        self.indexStart = 0;
        self.limit = limit;
        self.indexEnd = self.indexStart + self.limit;
        self.items = self.allItems.slice(self.indexStart, self.indexEnd);
    };

    p.getAllItems = function getAllItems() {
        return self.allItems;
    };

    /**
     * getPage
     * @param pageNumber - The page number of the items to return
     * @returns {*|Pagination.items}
     */
    p.getPage = function getPage(pageNumber) {
        if(pageNumber > self.numPages - 1) {
            return;
        }
        self.currentPage = pageNumber;
        self.indexStart = pageNumber * self.limit;
        self.indexEnd = self.indexStart + self.limit;
        self.items = self.allItems.slice(self.indexStart, self.indexEnd);
        return self.items;
    };

    /**
     * nextPage
     * Returns the next set of items
     * @returns {*}
     */
    p.nextPage = function nextPage() {
        if (self.hasMore() == false) {
            return null;
        }
        self.indexStart += self.limit;
        self.indexEnd += self.limit;
        self.items =  self.allItems.slice(self.indexStart, self.indexEnd);
        self.currentPage += 1;
        return self.items;
    };

    /**
     * prevPage
     * Returns the previous set of items
     * @returns {*}
     */
    p.prevPage = function prevPage() {
        if (self.currentPage <= 0) {
            return null;
        }
        self.indexStart -= self.limit;
        self.indexEnd -= self.limit;
        self.items =  self.allItems.slice(self.indexStart, self.indexEnd);
        self.currentPage -= 1;
        return self.items;
    };

    /**
     * getMore
     * Adds the next set of items to the current set of items
     * @returns {*}
     */
    p.getMore = function getMore() {
        if ( self.hasMore() == false ) {
            return null
        }
        //self.indexStart += self.limit;
        self.indexEnd += self.limit;
        self.items =  self.allItems.slice(self.indexStart, self.indexEnd);
        return self.items;
    };


    p.hasMore = function hasMore() {
        return self.indexEnd < self.allItems.length;
    };

    /**
     * showMoreBtn
     * Determines whether there are enough items to display the more button
     * @returns {boolean}
     */
    p.showMoreBtn = function showMoreBtn() {
        return self.allItems.length > self.limit;
    };

    p.getNumPages = function getNumPages() {
        return self.numPages;
    }

}

function QuickList() {

    if ( QuickList.id == null ) {
        QuickList.id = 0
    }
    var self = this;
    var p = this;

    self.data = {};

    /**
     * loadConfig
     * Overrides the default settings, and makes a call to create the list
     * @param settings - Settings to use for the list
     */
    p.loadConfig = function loadConfig(settings) {
        var defaultSettings = {};
        defaultSettings.enablePagination = false;
        defaultSettings.paginationLimit = 10;
        defaultSettings.pageNumberDisplayLimit = 10;
        defaultSettings.tableClasses = '';
        defaultSettings.alwaysShowFirstLastPage = false;
        defaultSettings.tableMode = false;

        $.each(settings, function overwriteDefault(k, v) {
            defaultSettings[k] = v;
        });

        settings = defaultSettings;
        self.settings = settings;

        // Give each list a name
        QuickList.id++;
        self.divName = 'ql_' + QuickList.id;

//        if(settings.divMoreButton == null || settings.moreButton == null) {
//            settings.divMoreButton = 'divMoreBtn_' + self.divName;
//            settings.moreButton = 'btnMore_' + self.divName;
//        }

//        var moreBtn = $(settings.moreButton);
//
//        // Unbind any old handlers
//        moreBtn.unbind();
//
//        // Set a handler for the more button
//        moreBtn.click( function(event) {
//            self.moreClickedHandler(event);
//            return false;
//        } );

        // Get the header row template
        if(settings.headerRowHTML_template) {
            $.ajax({
                url: settings.headerRowHTML_template,
                async: false,
                success: function(html) {
                    self.settings.headerRowHTML = html;
                }
            });
        }

        // Load json from server if needed
        if(settings.listJSONUrl) {
            self.proc('request', settings.listJSONUrl);
            self.utils.loadJSON(settings.listJSONUrl, function jsonLoaded(settings) {
                self.proc('got result', settings);

                // Merge settings
                $.each(self.settings, function mergeSetting(k, v) {
                    settings[k] = v;
                });

                self.settings = settings;
                self.createWrapper(settings);
                //self.createList(settings);
                //self.createListItems(listItems);
            })
        } else {
            self.createWrapper(settings);
            //self.createList(settings);
        }
    };

    /**
     * Create outer wrapper for div
     * @param settings
     */
    p.createWrapper = function createWrapper(settings) {
        // Get the template HTML
        var url = 'assets/quicklist_template.html';
        $.get(url, function(templateHTML) {
            var $response = $(templateHTML);

            var wrapperHtml = [];

            if(settings.tableMode) {
                wrapperHtml.push('<table id="quicklist-table-' + self.divName + '" class="' + self.settings.tableClasses + '">');
                if(self.settings.headerRowHTML) wrapperHtml.push(self.settings.headerRowHTML);
                wrapperHtml.push('<tbody></tbody></table>');
                wrapperHtml = wrapperHtml.join('');

//                var pageNavigation = '';
//                if(self.settings.usePages && self.settings.pageNavigationId == null) {
//                    pageNavigation = '<div id="pager-' + self.divName + '" class="' + self.settings.pageNavigationClasses + '"></div>';
//                    wrapperHtml = pageNavigation + wrapperHtml;
//                }
            } else {
                if(self.settings.headerRowHTML) wrapperHtml.push(self.settings.headerRowHTML);

                wrapperHtml.push('<div id="quickList-' + self.divName + '"><ul id="quickList_ql-' + self.divName + '" class="list-group"></ul></div>');

            }



            var pageNavigation = '';
            var divMoreButton = '';
            var divShowAllButton = '';
            if(self.settings.usePages && self.settings.pageNavigationId == null) {
                pageNavigation = '<div id="pager-' + self.divName + '" class="' + self.settings.pageNavigationClasses + '"></div>';
                wrapperHtml = pageNavigation + wrapperHtml;
            } else if (!self.settings.usePages && self.settings.divMoreButton == null) {
                self.settings.divMoreButton = 'divMoreBtn_' + self.divName;
                self.settings.moreButton = 'btnMore_' + self.divName;

                divMoreButton = '<div id=' + self.settings.divMoreButton + '">';
                divMoreButton += '<a id="' + self.settings.moreButton + '" href="javascript:;">More</a>';
                divMoreButton += '</div>';

                divShowAllButton = '<div id=' + self.settings.divShowAllButton + '">';
                divShowAllButton += '<a id="' + self.settings.showAllButton + '" href="javascript:;">More</a>';
                divShowAllButton += '</div>';

                wrapperHtml = wrapperHtml + divMoreButton + divShowAllButton;
            }

            // Strip out the divList and divMoreBtn
            var divList = $response.find('#divList');


            divList.attr("id", "divList-" + self.divName);
            //divList.empty();
            divList.html(wrapperHtml);

            // Add it to the div specified in the settings
            $('#' + settings.divId).html(divList);

            var moreBtn = $('#' + self.settings.moreButton);
            var showAllButton = $('#' + self.settings.showAllButton);

            // Unbind any old handlers
            moreBtn.unbind();
            showAllButton.unbind();

            // Set a handler for the more and show all buttons
            moreBtn.click( function(event) {
                self.moreClickedHandler(event);
                return false;
            });

            showAllButton.click( function(event) {
                self.showAllClickedHandler(event);
                return false;
            });

            self.createList(settings);
        });

    };

    /**
     * Create list items
     * @param settings
     */
    p.createList = function createList(settings) {
        var listItems = settings.items;
        self.listItems = listItems;

        if ( self.settings.enablePagination ) {
            var d = new Pagination();
            d.load(settings.items, self.settings.paginationLimit);
            self.pagination = d;
            settings.items = d.items;
            listItems = d.items;

            if(self.settings.usePages) {
                self.addPageNavigation();
                $('#' + self.settings.divMoreButton).hide();
                $('#' + self.settings.divShowAllButton).hide();
            } else {
                if(d.showMoreBtn()) {
                    // Only show the more button if there are more items to display than the limit allows
                    $('#' + self.settings.divMoreButton).show();
                    $('#' + self.settings.divShowAllButton).show();
                } else {
                    $('#' + self.settings.divMoreButton).hide();
                    $('#' + self.settings.divShowAllButton).hide();
                }
            }

            // Only show the more button if there are more items to display than the limit allows

        } else {
            $('#' + self.settings.divMoreButton).hide();
            $('#' + self.settings.divShowAllButton).hide();
        }

        self.createListItems(listItems);
    };

    p.createListItems = function createListItems(listItems, append) {
        var listHtml = [];

        if(self.settings.tableMode) {
            var compiled_html = null;
            if(self.settings.handlebars_template != null) {
                $.get(self.settings.handlebars_template, function(html) {

                    // Compile the Handlebars HTML
                    compiled_html = Handlebars.compile(html);

                    // Compile each row to get HTML <tr>
                    $.each(listItems, function pushElement(i, listItem){
                        listHtml.push(compiled_html(listItem));
                    });

                    // Remove the currently displayed results if we aren't appending
                    if(append == false) {
                        $('#quicklist-table-' + self.divName + ' > tbody > tr').remove();
                    }

                    listHtml = listHtml.join("");
                    $('#quicklist-table-' + self.divName + ' > tbody:last').append(listHtml);


                    // Add the new results to the table
                    /*$.each(listHtml, function appendRow(i, row){
                     $('#quicklist-table-' + self.divName + ' > tbody:last').append(row);
                     });*/

                });
            } else {
                // Assuming they are in HTML <tr> format
                $.each(listItems, function pushElement(i, listItem){
                    listHtml.push(listItem);
                });

                listHtml = listHtml.join("");
                $('#quicklist-table-' + self.divName + ' > tbody:last').append(listHtml);
            }
        } else {
            $.each(listItems, function createElement(i, listItem){
                if(self.settings.htmlRowCallback != null) {
                    listHtml.push(self.settings.htmlRowCallback(listItem,i));
                } else if(self.settings.itemProperty != null) {
                    listHtml.push('<li>' + listItem[self.settings.itemProperty] + '</li>');
                } else {
                    listHtml.push('<li>' + listItem.name + '</li>');
                }
            });

            if(append == false) {
                $('#quickList_ql-' + self.divName + ' li').remove();
            }

            listHtml = listHtml.join("");
            $('#quickList_ql-' + self.divName).append(listHtml);
        }



    };

    p.createListItems_old = function createListItems_old(listItems, append) {
        var initial = ''; //"\t";
        var listHtml = [];
        if ( append == true ) {

        } else {
            //listHtml.push('<div id="quickList" class="list-group" style="width: 100%; height: 95vh; overflow: auto;">');
            //listHtml.push('<div id="quickList-' + self.divName + '">');
            // listHtml.push('    <ul class="list-group">')
            self.data.dictListItemById = {};
            self.data.currentListItems = [];

            //listHtml.push('<table id="quicklist-table-' + self.divName + '" class="' + self.settings.tableClasses + '">');
            //listHtml.push(self.settings.headerRowHTML);
            //listHtml.push('<tbody>');

            //listHtml.push('<div id="quickList-' + self.divName + '">');

            //console.log(listHtml)
        }



        var compiled_html = null;
        if(self.settings.config != null && self.settings.config.handlebars_template != null) {
            $.get(self.settings.config.handlebars_template, function(html) {
                compiled_html = Handlebars.compile(html);
                populateHandlebars(appendHTML);
            });
        }

        function populateHandlebars(fxDone) {
            $.each(listItems, function createElement(i, listItem){
                listHtml.push(compiled_html(listItem));
            });
            fxDone();
        }

        /*$.each(listItems, function createElement(i, listItem){
         self.data.currentListItems.push(listItem); //give us global index

         console.log('listItem', listItem);


         //add elements to list
         if ( listItem.hidden ) {
         return;
         }

         /*if(self.settings.config != null && self.settings.config.handlebars_template != null) {

         $.get(self.settings.config.handlebars_template, function(html) {
         var compiled_html = Handlebars.compile(html);
         //console.log('html', html)

         //                    listHtml.push('<table>');
         //                    listHtml.push(self.headerRowHTML);
         //                    listHtml.push('<tbody>');
         //                    listHtml.push(compiled_html(self.items));
         //                    listHtml.push('</tbody></table>');

         //                    listHtml += '<table>';
         //                    listHtml += self.headerRowHTML;
         //                    listHtml += '<tbody>';
         console.log(listHtml);
         listHtml.push(compiled_html(listItem));
         //                    listHtml += '</tbody></table>';
         //                    console.log('listHtml', listHtml);
         });*/

        /*if(compiled_html) {
         console.log(listHtml);
         listHtml.push(compiled_html(listItem));
         } else {
         // only if handlebars not defined
         i = self.data.currentListItems.length;
         var itemOptions = {};
         itemOptions.title="Click to do something";
         itemOptions.href="#";

         //itemOptions.onclick="clickComp();return false;"
         itemOptions.id = self.utils.div('item', i);
         itemOptions.class = [];
         itemOptions.class.push('list-group-item');
         if ( listItem.disabled ) {
         itemOptions.class.push('disabled');
         }
         if ( listItem.selected ) {
         itemOptions.class.push('active');
         self.data.selected = listItem;
         }
         //itemOptions.class.push('class="list-group-item"')
         itemOptions.class = itemOptions.class.join(' ');

         listItem.id = itemOptions.id;

         //            var listItemContent = listItem.name;
         //            if ( self.settings.config != null && self.settings.config.handleBarsTemplate != null ) {
         //                listItemContent = self.utils.compileHandleBarsTemplate(listItem, self.settings.config.handleBarsTemplate)
         //            }

         var itemOptionsFlat = self.utils.convertOptionsToString(itemOptions);
         listHtml.push('        <a  '+itemOptionsFlat +'>'+listItemContent+'</a>');
         setTimeout(function addEv(){
         var uiListItem = $('#'+itemOptions.id);
         // $('#'+itemOptions.id).click( self.listClickedHandler  );
         $('#'+itemOptions.id).click( function(event){
         // console.log(x,event,self.listClickedHandler);
         //x()
         self.listClickedHandler(event);
         return false;
         } );
         listItem.uiLink = uiListItem;
         // $('#'+itemOptions.id).click(function(event){ self.listClickedHandler(event); return false; });
         },10);

         self.data.dictListItemById[itemOptions.id] = listItem;
         }
         });*/

        //self.proc('appened', append, self.data.dictListItemById);
        //   listHtml.push('    </ul>')

        function appendHTML() {
            //$('#quicklist-table-' + self.divName + ' > tbody > tr').remove();
            if ( append != true ) {
                for(var i = 0; i < listHtml.length; i++) {
                    $('#quicklist-table-' + self.divName + ' > tbody:last').append(listHtml[i]);
                }

                // old way

                //listHtml.push('</div>');
                //listHtml.push('</tbody></table>');
                //listHtml = listHtml.join("\n" + initial);
                //listHtml = listHtml.join("");
                //$('#divList-' + self.divName).html(listHtml);
                //$('#divMoreBtn').hide();
            } else {
                for(var i = 0; i < listHtml.length; i++) {
                    $('#quicklist-table-' + self.divName + ' > tbody:last').append(listHtml[i]);
                }

                // old way

                //listHtml = listHtml.join("\n" + initial);
                //listHtml = listHtml.join("");
                //$('#quickList-' + self.divName).append(listHtml);
                //$('#divMoreBtn').show();

                //make more target

            }
        }

        /*if ( append != true ) {
         listHtml.push('</tbody></table>');
         listHtml.push('</div>');
         listHtml = listHtml.join("\n" + initial);
         console.log('appending', listHtml);
         $('#divList').html(listHtml);
         $('#divMoreBtn').hide();
         } else {
         listHtml = listHtml.join("\n" + initial);
         $('#quickList').append(listHtml);
         $('#divMoreBtn').show();

         //make more target

         }*/
        /*setTimeout(function showMoreBtnBtn() {
         self.quickList = $('#quickList');
         if (  self.settings.enablePagination && self.pagination.hasMore() ) {
         $('#divMoreBtn').show();
         self.quickList.css("height", "88vh")
         }
         else {
         self.quickList.css("height", "95vh")
         }
         }, 1000);*/

    };

    p.listClickedHandler = function listClickedHandler(event){
        var  listItem = self.utils.getListItemFromClick(event);
        // var  clickTarget = self.utils.getComponentItemFromClick(event)
        //skip selected items
        if ( listItem.selected && listItem.reselectable != true) {
            self.proc(listItem.name, 'already selected');
            return;
        }
        //skip disabled items
        if ( listItem.disabled) {
            return;
        }

        //feature: users can set 'dirty' on listItem externally
        if ( self.settings.enableListItemDirtyCheck ) {
            var okNavigate = fxDirtyCheck(listItem);
            if ( listItem.dirty ) {
                self.utils.showDirtyDialog(self.listClickedHandler, event);
                return;
            }
        }

        var fxDirtyCheck = self.settings.fxDirtyCheck;
        if ( fxDirtyCheck != null ) {
            var okNavigate = fxDirtyCheck(listItem);
            if ( okNavigate == false ) {
                return;
            }
        }

        if ( listItem.selectable != false ) {
            if ( self.data.selected != null ) {
                self.data.selected.uiLink.removeClass('active');
                self.data.selected.selected = false;
            }
            var link = $('#'+event.currentTarget.id);
            link.addClass('active');
            self.data.selected=listItem;
            listItem.selected = true
        }

        if ( self.settings.fxCallback != null ) {
            self.settings.fxCallback(listItem, event.currentTarget, event.target)
        }
        //desc: send up the listItem clicked and the button clicked
        //self.config.itemClickedCallback(listItem, component)
    };

    /**
     * moreClickedHandler
     * Updates the list when the More button is clicked
     */
    p.moreClickedHandler = function moreClickedHandler() {
        if ( self.pagination == null) {
            self.proc('pagination is null');
            return;
        }

        // Get the next set of results (not including current results)
        var items = self.pagination.nextPage();

        // Hide the More button if there are no more results after this
        if ( self.pagination.hasMore() == false ) {
            $('#' + self.settings.divMoreButton).hide();
            $('#' + self.settings.divShowAllButton).hide();
        }

        // Append the new items
        if(items != null) {
            self.createListItems(items, true);
        }
    };

    /**
     * showAllClickedHandler
     * Updates the list when the Show All button is clicked
     */
    p.showAllClickedHandler = function showAllClickedHandler() {
        if ( self.pagination == null) {
            self.proc('pagination is null');
            return;
        }

        // Get the next set of results (not including current results)
        var items = self.pagination.getAllItems();

        // Hide the More and Show All buttons
        $('#' + self.settings.divMoreButton).hide();
        $('#' + self.settings.divShowAllButton).hide();

        // Show the whole list
        if(items != null) {
            self.createListItems(items, false);
        }
    };

    /**
     * addPageNavigation
     * When enabled, creates page number links to navigate the list
     */
    p.addPageNavigation = function addPageNavigation() {
        var $pageNavigation = null;
        if(self.settings.pageNavigationId != null) {
            $pageNavigation = $('#' + self.settings.pageNavigationId);
            $pageNavigation.empty();
        } else {
            $pageNavigation = $('#pager-' + self.divName);

        }
        for(var i = 0; i < self.pagination.getNumPages(); i++) {
            var page_id = 'page-' + i + '-' + self.divName;
            var page = $('<span id=' + page_id + ' class="' + self.settings.pageNumberClasses + '"></span>').text(i + 1).bind('click', {
                pageNumber: i
            }, function(event) {
                var pageNumber = event.data['pageNumber'];
                var items = self.pagination.getPage(pageNumber);
                if(items != null) {
                    self.createListItems(items, false);
                }

                $(this).addClass('active').siblings().removeClass('active');

                $(this).siblings().hide();
                var prev = $(this).prev();
                var next = $(this).next();
                display(pageNumber, prev, next);

                function display2(prev, next) {
                    var display = self.settings.pageNumberDisplayLimit - 2; // 2 for first and last pages
                    while(display > 0) {
                        if(!(prev.length > 0) && !(next.length > 0)) {
                            break;
                        }

                        if(prev.length > 0) {
                            prev.show();
                            prev = prev.prev();
                            display--;
                        }

                        if(next.length > 0) {
                            next.show();
                            next = next.next();
                            display--;
                        }
                    }
                }

                function display(pageNumber, prev, next) {
                    var displayLimit = self.settings.pageNumberDisplayLimit - 1; // subtract one for self

                    var offset = 0;
                    if(self.settings.alwaysShowFirstLastPage) {
                        if(pageNumber != 0 && pageNumber != self.pagination.getNumPages() && self.settings.alwaysShowFirstLastPage) {
                            displayLimit -= 2; // subtract for both first and last page
                        } else if(pageNumber != 0 || pageNumber != self.pagination.getNumPages()) {
                            displayLimit -= 1; // subtract for first or last page
                        }
                        offset = 1;
                    }

                    var displayLeft = 0;

                    if(displayLimit % 2 == 0) {
                        displayLeft = displayLimit / 2;
                    } else {
                        displayLeft = (displayLimit - 1) / 2;
                    }

                    var displayRight = displayLimit - displayLeft;

                    if(pageNumber - displayLeft <= 0) {
                        displayRight -= (pageNumber - displayLeft - offset); // subtracting negative to add, -offset to account for page 0
                        displayLeft += (pageNumber - displayLeft - offset); // adding negative to subtract, -offset to account for page 0
                        if(pageNumber == 0 && self.settings.alwaysShowFirstLastPage) displayRight -= 1; // quick fix to prevent an extra page from showing
                    }

                    if(pageNumber + displayRight >= self.pagination.getNumPages() - 1) {
                        displayLeft += ((pageNumber + displayRight + offset) - (self.pagination.getNumPages() - 1));
                        displayRight -= ((pageNumber + displayRight + offset) - (self.pagination.getNumPages() - 1));
                    }

                    while(displayLeft > 0) {
                        if (prev.length > 0) {
                            prev.show();
                            prev = prev.prev();
                            displayLeft--;
                        }
                    }

                    while(displayRight > 0) {
                        if(next.length > 0) {
                            next.show();
                            next = next.next();
                            displayRight--;
                        }
                    }

                }

                if(self.settings.alwaysShowFirstLastPage) {
                    $pageNavigation.find('span.page-number:first').show();
                    $pageNavigation.find('span.page-number:last').show();
                }

            }).appendTo($pageNavigation).addClass('clickable');

            if(i >= self.settings.pageNumberDisplayLimit - 1) {
                page.hide();
            }

        }

        if(self.settings.alwaysShowFirstLastPage) {
            $pageNavigation.find('span.page-number:last').show();
        }

        $pageNavigation.find('span.page-number:first').addClass('active');
    };

    p.proc = function proc() {
        console.log.apply(console, arguments)
    };

    self.utils = {};

    /**
     * Check if url is json or form
     * @param url
     * @param fx
     */
    self.utils.loadJSON = function loadJSON(urlOrObject, fx){
        var json = null;
        //desc: if formDescriptionJSON is a string, user has object, otherwise, make remote request
        if(typeof urlOrObject == 'string' || urlOrObject instanceof String){
            var url = urlOrObject;
            $.getJSON(url, json, function(json2){
                fx(json2)
            });
        }else{
            fx(urlOrObject);
        }
    };

    self.utils.convertOptionsToString = function convertOptionsToString(obj){
        var options = [];
        $.each(obj, function x(key, val){
            options.push(key+'="'+val+'"')
        });

        return options.join(" ")
    };

    self.utils.div = function div(){
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift(self.divName);

        return args.join("_")
    };

    self.utils.getListItemFromClick = function getListItemFromClick(event){
        var id = event.currentTarget.id;
        var listItem = self.data.dictListItemById[id];
        return listItem;
    };

    self.utils.getComponentItemFromClick = function getComponentItemFromClick(event){

    };

    /**
     * Enable users to reset the list
     * @param items
     */
    p.updateDataProvider = function updateDataProvider(items){
        var settings = sh.clone(self.oldSettings);
        settings.items = items;
        //TODO: investigate more efficient ways of updating list
        //createList(settings) ; //lazy way , will ose content area
        self.createListItems(settings); //optimal, but have to only update list area
    };

}

/**
 * QuickList.create
 * @param settings -
 *      divId - The id of the div to place the list
 *      items - The data to create the list from
 *      tableMode - True or false whether the list should be in a table or a <ul>
 *
 *      handlebars_template - A URL to the handlebars template to use to compile the HTML for each row/item
 *      headerRowHTML_template - A URL to the handlebars template to use for the table header
 *      headerRowHTML - The actual HTML to use for the table header
 *
 *      tableClasses - Classes to add to the table list
 *
 *      enablePagination - True or false to break the list into pages
 *      paginationLimit - The number of items to display per page
 *      usePages - True or false to use page numbers for navigation (false implies use of More button)
 *      pageNavigationId - The id of where to place the page numbers, if not provided on is created
 *      pageNumberDisplayLimit - The maximum number of page numbers to display at one time
 *      alwaysShowFirstLastPage - True or false to show the first and last page buttons always
 *
 *      divMoreButton - The id of the div containing the more button (if used)
 *      moreButton - The id of the more button itself
 *
 *      divShowAllButton - The id of the div containing the show all button (if used)
 *      showAllButton - The id of the show all button itself
 *
 *      htmlRowCallback - callback to generate html for each row Item.
 * @returns {QuickList} - The list will be added to the specified location
 */
QuickList.create = function create(settings){
    if ( settings.items == null && settings.listJSONUrl == null ) {
        throw 'no items, need a url'
    }

    var q = new QuickList();
    q.loadConfig(settings);
    return q;
};

new QuickList();