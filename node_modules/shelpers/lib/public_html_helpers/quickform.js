function QuickForm() {

    if ( QuickForm.instances == null ) {
        QuickForm.instances = [];
    }
    var self = this;
    var p = this;

    var types = {}
    types.BUTTON = 'button'
    types.Label = 'label'
    types.CollapseStart = 'collapseStart'
    types.CollapseEnd = 'collapseEnd'
    types.div = 'div';

    //store the jsonForm Itme to ID of item on stage for all visible elements
    self.dictInxToItem={}
    self.dictInxToItemData={}
    self.dictInxToJSONItem = {}
    //the only one that should be used ...
    self.dictInxToFormDescriptionObjs = {}

    self.createForm = function createForm(settings){
        var div_id=settings.div_id, dataObject=settings.dataObject,
            formDescriptionJSON=settings.formDescriptionJSON,
            fxCallback=settings.fxCallback, formTitle=settings.formTitle, popup=settings.popup
        var data, descriptionObj, description, form_styles, keepdata, rawdata;
        var elementHTML;
        var json_serialized;
        var errors = false;

        var div_title = 'modal-title_'+ div_id;

        self.dict = {}
        self.id = div_id  + '_ql_'
        QuickForm.instances[ self.id] = self;

        self.settings = settings;

        self.divs = {}
        self.divs.formBody = 'the-form_'+ self.id
        self.divs.btnSave = self.utils.createDivId('btnSave')
        self.divs.btnCancel = self.utils.createDivId('btnCancel')
        self.divs.formBody = 'the-form_'+ self.id

        var initial = "";
        var popupWrapper = initial +
            ['<div class="qfwrapper">',
                '       <div style="margin: 30px auto; width: 160px;">',
                    '           <a id="load_the_form" href="#quickform_'+ div_id +'" class="btn btn-warning btn-large" data-toggle="modal">Load the Form</a>',
                '       </div>',
                '',
                    '       <div id="quickform_'+ div_id +'" class="modal hide fade">',
                '           <div class="modal-header">',
                '               <button type="button" class="close" data-dismiss="modal">&times;</button>',
                    '               <h3 id="'+div_title+'"></h3>',
                '           </div>',
                '           <div class="modal-body">',
                    '               <form id="'+self.divs.formBody+'" class="form-inline">',
                '                   ',
                '               </form>',
                '           </div>',
                '           <div class="modal-footer">',
                '               <div class="formbtns">',
                '                   <input type="button" value="Save" class="btn btn-primary" id="save_form" />',
                '                   <input type="button" value="Cancel" class="btn" id="cancel_form" data-dismiss="modal" />',
                '               </div>',
                '       </div>',
                '   </div>'].join("\n" +initial);

        var str2 = '<div class="wrapper"><form id="the-form_'+ div_id +'" class="form-inline"></form></div>';


        function createDivId(post){
            return    div_id +'_' + post
        }
        var titleHtml = '<br/>'
        if ( formTitle != null ) {
            titleHtml = [
                '           <div class="modal-header">',
                    '               <h3 id="'+div_title+'">'+formTitle+'</h3>',
                '           </div>',
                '<br />'].join("\n")
        }

        var formWrapper = initial +
            ['<div class="form-rendered">',
                    '	<form id="'+self.divs.formBody+'">',
                '',
                titleHtml,
                '	</form>',
                    '	<div '+self.utils.makeAttr('id', createDivId('footer'))+' class="formbtns">',
                    '		<input type="button" value="Save" class="button" id="'+self.divs.btnSave+'" />',
                    '		<input type="button" value="Cancel" class="button" id="'+self.divs.btnCancel+'" />',
                '	</div>',
                '	<br class="both">',
                '</div>'].join("\n" +initial);



        if (popup == false) {
            $('#'+ div_id).html(formWrapper);
        } else {
            $('#'+ div_id).html(popupWrapper);
        }

        function processFormDescriptionJSON(formDescriptionJSON) {
            descObjLoaded(formDescriptionJSON.formElements);
            keepdata = formDescriptionJSON.formElements;
            applyStyles(formDescriptionJSON.formStyles);
            if ( formDescriptionJSON.config != null ) {
                formTitle = formDescriptionJSON.config.title;
                $("#"+div_title).text(formTitle);
                var showFooter = formDescriptionJSON.config.showFooter;
                if ( showFooter == false ) {
                    $("#" + createDivId('footer')).hide()
                }
            }
        }

        //desc: if formDescriptionJSON is a string, user has object, otherwise, make remote request
        if(typeof formDescriptionJSON == 'string' || formDescriptionJSON instanceof String){
            var url_formDescriptionJSON = formDescriptionJSON
            $.getJSON(formDescriptionJSON, descriptionObj, function(descriptionObj){
                processFormDescriptionJSON(descriptionObj)
            });
        }else{
            processFormDescriptionJSON(formDescriptionJSON);
        }



        function delayPopulationo() {
            if (typeof dataObject == 'string' || dataObject instanceof String) {
                $.getJSON(dataObject, data, function (data) {
                    dataObjLoaded(data);
                    rawdata = data;
                });
            } else {
                dataObjLoaded(dataObject);
                rawdata = data;
            }


        }
        setTimeout(delayPopulationo, 500)

        $("#"+div_title).text(formTitle);

        function applyStyles(value){
            $.each(value, function(ind, val) {
                $("#quickform").css(ind , val);
            });
        }

        function dataObjLoaded(dataObj){
            $.each(dataObj, function loadValues(fieldName, val) {
                var qFormItem = self.dictInxToJSONItem[fieldName]
                if ( qFormItem == null ) {
                    console.error('data field is invalid ' + fieldName);
                    return;
                    throw 'data field is invalid ' + fieldName;
                    throw 'cannot find qFormItem for id ' + fieldName
                }
                var id = qFormItem.id;
                var ui = $("#"+id);
                if ( ui.length < 1) {
                    throw 'cannot find for id ' + fieldName
                }
                if ( ui.length > 1) {
                    throw 'too many ids for ' + fieldName
                }
                //hangle radio buttons
                if(ui.attr('type') == 'radio'){
                    ui.each(function(i, el) {
                        if($(this).attr("value") == val){
                            $(this).prop('checked',true);
                        }
                    });
                }else{
                    if ( val == undefined){
                        val = ''
                    }

                    ui.val(val);
                    /* if ( this.toString().indexOf('label')==0){
                     $(this).text(val);
                     }*/
                    if ( ui[0].tagName.toString().toLowerCase() == "label" ) { //.indexOf('label')==0){
                        ui.text(val);
                    }
                }
                //this was a bad implementation ... restore from model
                ui.closest('.formelem-wrap').attr('data-orig', val);
            });


            //hide fields for conditional inclusion first time
            if ( self.dataLoadedOnce != true ) {
                self.dynamicChanges()
            }
            //setTimeout(self.dynamicChanges, 300)
        }

        function descObjLoaded(description){


            //description_arr = $.map(description, function(el) { return el; });




            //to create the 'same row'
            var lastRowVisible = null;
            var rowItemsProcessed = {};
            $.each(description, function preProcessRowItems(itemName, rowItem) {
                if ( rowItem.ignore ) {
                    return;
                }
                if ( rowItem.sameRow ){
                    //rowItem.ignore = true;
                    lastRowVisible.siblings=self.utils.dv(lastRowVisible.siblings,{})
                    lastRowVisible.siblings[itemName] =(rowItem) ;
                    // rowItem.ignore = true
                    return
                }
                lastRowVisible = rowItem;
                rowItemsProcessed[itemName] = rowItem
            })


            var rowHTML = [];
            $.each(rowItemsProcessed, function createRowHTMLformRowItem(ind, jFormElementRow) {

                var elementHTML = self.createRowHTMLformRowItem(ind, jFormElementRow)
                rowHTML.push(elementHTML);
                setTimeout(function xd(){
                    $("#elem_" + ind).required = jFormElementRow.required;
                },200)

                self.dict[ind] = "elem_" + ind
                if(jFormElementRow.styles != null){
                    jQuery.each(jFormElementRow.styles, function(indx, jFormElementRowx) {
                        $("#elem_" + ind).css(indx , jFormElementRowx);
                    });
                }

                console.log('test', ind, jFormElementRow, elementHTML)
            });

            $("#"+self.divs.formBody).append(rowHTML.join("\n"));
        }





        self.setupFormListeners = function setupFormListeners(){
            //$("#"+ self.divs.btnSave).click(function (){asdf.g})
            //self.proc('setuping up listeners');
            $("#"+ self.divs.btnSave).click(self.clickSave)
            $("#"+ self.divs.btnCancel).click(self.clickCancel)



            $("#"+ self.divs.formBody).on("change", ".form-component", self.dynamicChanges);
            $("#"+ self.divs.formBody).on("keyup", ".form-component", self.dynamicChanges);


            //self.dynamicChanges()
        }

        setTimeout(self.setupFormListeners, 300)


        self.clickCancel = function clickCancel(){
            $(".formelem-wrap .form-component").each(function(index, element) {
                if($(this).attr('type') == 'radio'){
                    $(this).each(function(i, el) {
                        if($(this).attr("value") == $(this).parent().attr('data-orig')){
                            $(this).prop('checked',true);
                        }
                    });
                }else if($(this).attr('type') == 'checkbox'){
                    var orig = $(this).parent().attr('data-orig');
                    var origs = orig.split(',');
                    $(this).each(function(i, el) {
                        console.log(jQuery.inArray($(this).attr("value"), origs));
                        if(jQuery.inArray($(this).attr("value"), origs) >= 0){
                            $(this).prop('checked',true);
                        }else{
                            $(this).prop('checked',false);
                        }
                    });
                }else{
                    $(this).val($(this).parent().attr('data-orig'));
                }
            });
        };



        self.clickSave =  function clickSave (notClick){
            //  asd.g
            json_serialized = {};
            var output = self.dynamicChanges(null, true, true)
            var errors = output.errors;
            var formDataObject = output.json;
            /*    jQuery.each(keepdata, function(ind, val) {
             var fieldValue = $('#elem_'+ ind).val()
             if(val.required == true && fieldValue == ""){
             $('#elem_'+ ind).closest('.form-row').find('.help-inline').html('<span class="error">* required!</span>');
             errors = true;
             }else{
             if(val.minChars && val.maxChars && val.minChars <= fieldValue.length  && val.maxChars >= fieldValue.length){
             json_serialized[ind] = $('#elem_'+ ind).val();
             $('#elem_'+ ind).closest('.form-row').find('.help-inline .msg').html('');
             } else if (!val.minChars && !val.maxChars) {
             if($('#elem_'+ ind).attr('type') == 'checkbox'){
             var serial_options = [];
             $('#elem_'+ ind +':checked').each(function(){
             if($(this).is(':checked')){
             serial_options.push($(this).val());
             }
             });
             json_serialized[ind] = serial_options;
             }else{
             json_serialized[ind] = $('#elem_'+ ind).val();
             }
             $('#elem_'+ ind).closest('.form-row').find('.help-inline .msg').html('');
             } else {
             var error_explain = "";
             if(val.minChars > $('#elem_'+ ind).val().length  || val.maxChars < $('#elem_'+ ind).val().length){
             error_explain = "This must be " + val.minChars + " - " + val.maxChars + " characters.";
             }
             $('#elem_'+ ind).closest('.form-row').find('.help-inline .msg').html('<span class="error">* ERROR! '+ error_explain +'</span>');
             errors = true;
             }
             }

             });
             */
            if(errors.length == 0 ){
                if ( notClick ) {
                    return formDataObject;
                }
                if(fxCallback != null){
                    fxCallback(formDataObject);
                    return;
                } else {
                    $.post("receive.php", formDataObject).done(function (html) {
                        alert('Done.');
                    }, "json");
                }
            }
            console.log('had errors', errors.length,"\n", errors.join("\n"))
            return null;
        };

        $("#the-form_"+ div_id).on("change", "select", function(){
            if($(this).find("option:selected").text() == "Other"){
                $(this).siblings(".otheroption").removeClass("hide");
                console.log("");
            }else{
                $(this).siblings(".otheroption").addClass("hide");
            }

        });
        $("#the-form_"+ div_id).on("keyup", ".otheroption", function(){
            var thisis_id = $(this).attr("id").replace("_otherwhat", "");
            $(this).siblings("select").find("#" + thisis_id + "_other").val($(this).val());
        });

        // This function is being called when the button is created.
        function buttonCallBack(buttonName){
            console.log('buttonCallBack', buttonName)
            //alert("The button's name is: " + buttonName);
        }

        function serializer(){
            var serizalized_obj = {};

            /*    $(".form-row").each(function(index, element){
             var element_id  = $(element).find(".form-component").attr("id");
             element_id = element_id.replace("elem_", "");
             var element_val = $(element).find(".form-component").val();
             serizalized_obj[element_id] = element_val;
             });
             */
            $.each(self.dictInxToItemData, function(index, id){
                var idd = '#'+'elem_'+id;
                var element_id  = $(idd);
                var element_val = element_id.val();
                serizalized_obj[index] = element_val;
            });

            console.log(serizalized_obj);

            return serizalized_obj;
        }


        self.dynamicChanges = function dynamicChanges(e, createObject, changeForm){
            var obj = serializer();


            createObject = self.utils.dv(createObject, true)
            changeForm = self.utils.dv(changeForm, true)

            var errors = [];
            var formData = {};

            var error_explain = ''


            function addError(fieldName, error ) {
                errors.push(fieldName+ ' ' + error)
            }


            $.each(self.dictInxToJSONItem, function(ind, modelItem) {
                var jsonFormItem = modelItem.json;
                var jsonFI = jsonFormItem
                var uiId = modelItem.id;

                var val  = jsonFormItem;
                var ui = $('#'+uiId);
                var uiError = $('#'+uiId+'_error');
                //TODO: this will not work if all on same line
                var uiHolder =   $('#'+uiId+'_holder');
                var val = ui.val();

                var fieldName = ind;

                uiError.html('')


                var uiVisible = true
                if ( changeForm ) {

                    if (jsonFI.includeIf != null) {
                        var includeIfExpression = jsonFI.includeIf;
                        var includeStatement = eval(includeIfExpression);
                        if (includeStatement) {
                            uiHolder.show();
                        } else {
                            uiHolder.hide();
                            uiVisible = false
                        }
                    }

                    if (jsonFI.excludeIf != null) {
                        var excludeIfExpression = jsonFI.excludeIf;
                        var excludeStatement = eval(excludeIfExpression);
                        if (excludeStatement) {
                            uiHolder.hide();
                            uiVisible = false
                        } else {
                            uiHolder.show();
                        }
                    }
                }


                if ( uiVisible == false ) {
                    return
                }



                function addError(fieldName, error ) {
                    if ( e != null ) { //this is not real
                        return;
                    }
                    if ( jsonFormItem.label != null ) {
                        fieldName = jsonFormItem.label;
                    }
                    var errorMsg = fieldName+ ' ' + error
                    errors.push(errorMsg)
                    uiError.html(self.utils.wrapSpan(errorMsg, 'error'))
                }

                var error_explain = ''
                if(jsonFI.required == true && val == ""){
                    //$('#elem_'+ ind).closest('.form-row').find('.help-inline').html('<span class="error">* required!</span>');
                    addError(fieldName, 'is required')
                    //errors = true;
                }

                if ( val != null && val != '' ) {
                    if (jsonFI.minChars != null || jsonFI.maxChars != null) {
                        if ( val.length < jsonFI.minChars ) {
                            error_explain = "This must be " + " > " + val.minChars + " characters.";
                            $('#elem_' + ind).closest('.form-row').find('.help-inline .msg').html('<span class="error">* ERROR! ' + error_explain + '</span>');
                            addError(fieldName, error_explain)
                        }
                        if ( val.length > jsonFI.maxChars  ) {
                            error_explain = "This must be " + " < " + val.maxChars + " characters.";
                            $('#elem_' + ind).closest('.form-row').find('.help-inline .msg').html('<span class="error">* ERROR! ' + error_explain + '</span>');
                            addError(fieldName, error_explain)

                        }
                    }
                }



                //if does not have error
                formData[fieldName] = val;

                //if checkbox
                if(ui.attr('type') == 'checkbox'){
                    var serial_options = [];
                    $('#' + uiId +':checked').each(function(){
                        if($(this).is(':checked')){
                            formData.push($(this).val());
                        }
                    });
                    formData[fieldName] = serial_options;
                }





            });

            var output = {}
            output.json = formData;
            output.errors = errors;
            return output
        }


    } // This closes the createForm() function


    /**
     * Get and validate object at any time
     * if validation fails, object will be null
     * @returns {*}
     */
    self.getObj = function getObj() {
        var y = self.clickSave(true)
        return y;
    }

    QuickForm.createPopup = function createPopup(div_id, dataObject, formDescriptionJSON, fxCallback, formTitle){
        QuickForm.createForm(div_id, dataObject, formDescriptionJSON, fxCallback, formTitle, true);
    }

    QuickForm.createForm = function createForm(div_id, dataObject, formDescriptionJSON, fxCallback, formTitle, popup){
        //QuickForm.createForm(div_id, dataObject, formDescriptionJSON, fxCallback, formTitle, true);
        var qF = new QuickForm();
        var settings = {};
        settings.div_id   = div_id
        settings.dataObject = dataObject
        settings.formDescriptionJSON = formDescriptionJSON
        settings.fxCallback = fxCallback
        settings.formTitle = formTitle
        settings.popup = popup
        qF.createForm(settings)

    }

    QuickForm.create = function createForm(settings){
        var qF = new QuickForm();
        qF.createForm(settings)
    }



    function defineUtils() {
        self.utils = {}
        self.utils.makeAttr = function makeAttr(name, val) {
            return ' ' + name + '="' + val + '"'
        }
        self.utils.createDivId = function createDivId(post){
            return    self.id +'_' + post
        }

        self.utils.q = function q(val) {
            return "'"+val+"'"
        }
        self.utils.defaultValue = function defaultValue(input, ifNullUse) {
            if (input == null) {
                return ifNullUse
            }
            return input;
        }
        self.utils.wrapSpan = function defaultValue(msg, class_) {
            var span = '<span class="error help-inline">* ERROR! ' + msg + '</span>'

            return span;
        }

        self.utils.dv = self.utils.defaultValue
    }
    defineUtils();


    function defineCreateHTMLMethods() {
        self.createRowHTMLformRowItem =   function createRowHTMLformRowItem(ind, jFormElementRow) {

            var itemName = ind;
            var fieldName = ind;
            var indId = self.id+'_'+ind;
            self.dictInxToItem[ind]=indId

            ind = indId;



            var elementHTML = ''
            function addNewLine() {
                elementHTML += "\n"
            }

            var noWrapRow = false
            var isFormField = true
            var item = jFormElementRow;
            var itemType = item.type;

            function rowIs(type) {
                return type.toLowerCase() == jFormElementRow.type;
            }

            if (jFormElementRow.visible == false) {
                return;
            }
            if (jFormElementRow.ignore == true) {
                return;
            }
            if (jFormElementRow.showLabel != null && jFormElementRow.showLabel == "false") {
                showingLabel = " hidden";
            } else {
                showingLabel = "";
            }

            if (jFormElementRow.leftPadding != null) {
                left_padding = " padding-left: " + jFormElementRow.leftPadding + "px;";
            } else {
                left_padding = "";
            }
            //feature: use ind for label if label not defined
            if (item.label == null) {
                item.label = ind
                item.label = ''
                if (rowIs(types.BUTTON)) {
                    item.label = ind
                    console.log(ind, 'btn')
                }
            }

            var hideRow = ''
            if (item.hide) {
                hideRow = ' display: none;'
            }

            var sameRow = ''
            /*
             if ( item.sameRow || item.shareRow ) {
             sameRow = ' display: inline-block; '
             }*/
            if ( item.sameRow  ) {
                sameRow = ' display: inline-block; '
            }

            //if ( item.sameRow != true ) {
            elementHTML = "<div class='form-row' "+self.utils.makeAttr('id', "elem_" + ind + "_holder")+" style='" + left_padding + hideRow + sameRow + "'>";
            if ( item.showLabelArea != false ) {
                elementHTML += "<label class='mainlabel" + showingLabel + "'>" + jFormElementRow.label + "</label>";
            }
            elementHTML += "<div class='formelem-wrap' data-orig='' " + "style='" + sameRow + "'" + ">"

            if ( item.sameRow  ) {

                elementHTML = '<div style="display: inline; "><div style="display: inline; " data-orig="" > '
            }
            /*} else {
             elementHTML = "<span class='' style='" + left_padding + hideRow + "'>";
             elementHTML += "<label class='mainlabel" + showingLabel + "'>" + jFormElementRow.label + "</label>";
             elementHTML += "<span class='' data-orig=''>"
             }*/

            if (jFormElementRow.type == "Textinput") {
                elementHTML += "<input type='text' jFormElementRowue='' class='form-component' maxlength='" + jFormElementRow.maxChars + "' id='elem_" + ind + "'>";
            }
            else if (jFormElementRow.type == "dropdown" || jFormElementRow.type == "listbox") {
                if (jFormElementRow.type == "dropdown") {
                    elementHTML += "<select class='form-component' id='elem_" + ind + "'>";
                } else if (jFormElementRow.type == "listbox") {
                    elementHTML += "<select multiple class='form-component' id='elem_" + ind + "'>";
                }

                var opts = jFormElementRow.options;
                for (var i = 0; i < opts.length; i++) {
                    elementHTML += "<option id='" + opts[i] + "'";
                    if (jFormElementRow.selected != null && jFormElementRow.selected[0] == opts[i]) {
                        elementHTML += " selected";
                    }
                    elementHTML += ">" + opts[i] + "</option>";
                }
                //feature: enable user to add new options
                if (jFormElementRow.augmentable) {
                    elementHTML += "<option id='" + ind + "_other' jFormElementRowue=''>Other</option>";
                    elementHTML += "</select>";
                    elementHTML += "<span class='clear'></span>";
                    elementHTML += "<input type='text' placeholder='Other...' id='" + ind + "_otherwhat' class='otheroption hide'>"
                }

                addNewLine()
                elementHTML += "</select>"
            }
            else if (jFormElementRow.type == "textarea") {
                elementHTML += "<textarea type='text' class='form-component' maxlength='" + jFormElementRow.maxChars + "' id='elem_" + ind + "'></textarea>";
            }
            else if (jFormElementRow.type == types.BUTTON) {
                elementHTML += "<input type='button' jFormElementRowue='" + jFormElementRow.label + "' " +
                    self.utils.makeAttr('value', jFormElementRow.label) +
                    self.utils.makeAttr('onclick', 'QuickForm.clickButton(' + self.utils.q(self.id) +
                        ', ' + self.utils.q(fieldName) + ')') +
                    " ' id='elem_" + ind + "' class='form-component btn' name='elem_" + ind + "' />";
                // call a function called buttonCallBack() and pass the name of the button to it.
                //buttonCallBack(ind);
                isFormField = false
            }
            else if (jFormElementRow.type == types.Label) {
                //todo: rq: what is this? jFormElementRowue
                if (jFormElementRow.jFormElementRowue == null) {
                    jFormElementRow.jFormElementRowue = ''
                }
                elementHTML += "<label id='elem_" + ind + "' class='form-component'>" + jFormElementRow.jFormElementRowue + "</label>";
            }
            else if (jFormElementRow.type == types.CollapseStart) {
                isFormField = false
                if (jFormElementRow.jFormElementRowue == null) {
                    jFormElementRow.jFormElementRowue = ''
                }

                var collapsed = '';
                if ( item.closed || item.collapsed ) {
                    collapsed = ' class="collapsedo" '
                    setTimeout(function coll(){
                        $('#collapseOne' + ind ).collapse()
                    }, 50)
                }
                var initial = "";
                var str = initial +
                    ['<div class="panel panel-default">',
                        '    <div class="panel-heading">',
                        '        <span class="panel-title">',
                            '            <a data-toggle="collapse"  href="#collapseOne' + ind + '" '+collapsed+'>',
                            '                ' + item.label,
                        '            </a>',
                        '        </span>',
                        '    </div>',
                            '    <div id="collapseOne' + ind + '" class="panel-collapse collapse in">',
                        '        <div class="panel-body">'
                    ].join("\n" + initial);


                elementHTML = str
                noWrapRow = true
            }
            else if (jFormElementRow.type == types.CollapseEnd) {
                isFormField = false
                if (jFormElementRow.jFormElementRowue == null) {
                    jFormElementRow.jFormElementRowue = ''
                }
                //close the 3 divs in the open tag
                var initial = "";
                var str = initial +
                    [ '        </div>',
                        '    </div>',
                        '</div>'].join("\n" + initial);
                elementHTML = str
                noWrapRow = true
            }
            else if (itemType == types.div) {
                isFormField = false
                if (jFormElementRow.jFormElementRowue == null) {
                    jFormElementRow.jFormElementRowue = ''
                }
                //div element
                //lets devs define content to show and hide
                var initial = "";

                /*if ( item.noLabel == true ) {

                 } else {
                 elementHTML= ''
                 noWrapRow = true
                 }*/
                var divID = ''
                if (item.id != null) {
                    divID = self.utils.makeAttr('id', item.id);
                }
                item.html = self.utils.dv(item.html, '')
                var str = '<div ' + divID + ' >' + item.html + '</div>'
                if (item.span) {
                    str = '<span ' + divID + ' >' + item.html + '</span>'
                }
                elementHTML += str
            }
            else if (jFormElementRow.type == "radio") {
                var opts = jFormElementRow.options;
                for (var i = 0; i < opts.length; i++) {
                    elementHTML += "<label class='radio'><input type='radio' jFormElementRowue='" + opts[i] + "' id='elem_" + ind + "' name='elem_" + ind + "' class='form-component'>" + opts[i] + "</label><br>";
                }
            } else if (jFormElementRow.type == "checkbox") {
                var opts = jFormElementRow.options;
                for (var i = 0; i < opts.length; i++) {
                    elementHTML += "<label class='checkbox'><input type='checkbox' jFormElementRowue='" + opts[i] + "' id='elem_" + ind + "' name='elem_" + ind + "' class='form-component'>" + opts[i] + "</label><br>";
                }
            }

            if ( item.siblings != null ) {
                $.each(item.siblings, function f(i,x){
                    var  c = self.createRowHTMLformRowItem(i,x)
                    elementHTML += c;
                })
            }

            if ( isFormField ) {
                self.dictInxToItemData[itemName] = indId
                var modelItem = {}
                modelItem.json = jFormElementRow;
                modelItem.id = 'elem_'+indId;
                self.dictInxToJSONItem[itemName] = modelItem

            }
            /*if ( item.shareRow != true ) {
             elementHTML += "</div>";
             }
             if ( item.endRow != true ) {
             elementHTML += "</div>";
             }*/
            elementHTML += "</div>";

            if (noWrapRow != true) {

                /*if ( item.shareRow != true ) {
                 elementHTML += "<span class='clear'></span>";
                 }*/
                if ( item.sameRow != true ) {
                    elementHTML += "<span class='clear'></span>";
                    elementHTML += "<span class='help-inline'>";
                }
                if (jFormElementRow.inlineHelp != null) {
                    elementHTML += jFormElementRow.inlineHelp;
                }


                elementHTML += "<span class='msg'></span></span>";
                //formItem[]////
                //dictInxToFormDescriptionObjs
                elementHTML += "<span "+self.utils.makeAttr('id',"elem_" + ind + "_error")+"></span>";
                elementHTML += "</div>";
            }


            return elementHTML;
        }
    }

    defineCreateHTMLMethods();

    /*
     function fxCallback(json_serializeds){
     console.log(JSON.stringify(json_serializeds));
     }

     $('#load_the_form').click(function(l_event){

     });
     createForm("oramt", "assets/dataObject.json", "assets/formDescriptionObject.json", fxCallback, "This is the title", true);
     */
    function defineButtonFunctions() {
        if ( QuickForm.clickButton==null) {
            /**
             * Invoked globally from ui event. All instances use this method.
             * @param instance
             * @param name
             */
            QuickForm.clickButton = function clickButton(instance, name) {
                console.log(instance, name)
                var instance = QuickForm.instances[instance]
                if (instance != null) {
                    instance.buttonClicked(name)
                }
            }
        }
        /**
         * Invoked from context of quickform instance
         * @param name
         */
        self.buttonClicked = function buttonClicked( name) {
            console.log( name)
            if ( self.settings.fxFormButtonClicked != null ) {
                self.settings.fxFormButtonClicked(name, self);
            } else {
                console.error('no fxFormButtonClicked defined on', self.id)
            }
        }
    }
    defineButtonFunctions();
}

new QuickForm();