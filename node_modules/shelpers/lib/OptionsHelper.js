/**
 * Created by user1 on 4/27/14.
 * Used to help define options object in methods that
 * accept options object/ associative array for named arguments
 */
var sh = require('shelpers').shelpers

function OptionsHelper() {
    var p = OptionsHelper.prototype
    var self = this;

    p.learnMode = false; //if true, send options to null
    //then will put the descriptions on the options object

    p.addOption = function addOption(field, desc,  required , defaultValue){

        defaultValue    =   sh.defaultValue(defaultValue, null)
        required        =   sh.defaultValue(required, false)

        if ( this.learnMode == true  ) {
            this.options[field] = desc;
            this.options.fields[field] = {field:desc,
                required:required,
                defaultValue:defaultValue}
            return
        }
        if ( this.options == null ) {
            this.options    = {}
            this.learnMode  = true;
        }

        if ( this.options[field] == null) {
            if ( required == true ) {

                throw new Error( ['Please specify a value for the field', sh.qq(field)].join(' ')) //has field but is null
            }
            if ( defaultValue != null ) {
                this.options[field]  =  defaultValue
            }
        }


        return this.options[field];
    }

    p.loadOptions = function loadOptions(options, optionsNotRequired ){
        this.options = options
        this.learnMode = false;
        if ( options == null && optionsNotRequired != true ) {
            throw new Error('options are empty')
        }
        /*if ( this.options == null ) {
         this.options = {}
         this.options.fields = {};
         this.learnMode = true;
         }*/
    }


    p.startLearnMode = function startLearnMode(options ){
            this.options = {}
            this.options.fields = {};
            this.learnMode = true;
    }




    p.proc = function proc(options ){
        console.log(this.options)
    }


    p.show = function proc(optionsSetOnThisObj ){
        console.log(this.options)

        if ( optionsSetOnThisObj != null ) {
            //only show proerties in options
            console.log('item')
            console.log(optionsSetOnThisObj)
        }

    }


    p.sentNull = function sentNull() {
        return this.lernMode;
    }


}

exports.OptionsHelper = OptionsHelper;

if (module.parent == null) {

    var p = new OptionsHelper();
    p.loadOptions(null)
    p.addOption('callback', 'desc1')
    p.addOption('callback2', 'desc2')
    p.addOption('callback3', 'desc3')
    p.show()

    function testsCopyingOfProperty() {
        var l = {}
        p.loadOptions({callback3:'something'})
        l.callback = p.addOption('callback', 'desc1')
        l.callback2 = p.addOption('callback2', 'desc2')
        l.callback3 =  p.addOption('callback3', 'desc3', true)
        p.show(l)
    }
    testsCopyingOfProperty()


    function testsCopyingOfReqdProperty() {
        var errorSet = false
        try {
            p.loadOptions({})
            p.addOption('callback', 'desc1')
            p.addOption('callback2', 'desc1')
            p.addOption('callback3', 'desc1', true)
            p.show()
        }
        catch ( e ) {
            errorSet = true
        } finally {
            if ( errorSet == false ) { throw 'needed error '}
        }
    }
    testsCopyingOfReqdProperty()

}