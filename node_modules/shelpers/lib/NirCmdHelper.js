/**
 * Created by user1 on 4/27/14.
 * Collection of helpers to display warnings to user in windows systems
 */
var sh = require('shelpers').shelpers
var CommandRunner = sh.CommandRunner
var PromiseHelper = require('shelpers').PromiseHelper;

function NirCmdHelper(options) {
    var p = NirCmdHelper.prototype
    var self = this;

    if ( options != null ) {
        self.silent = sh.default(options.silent, true)
    }

    p.startLearnMode = function startLearnMode(options ){
        this.options = {}
        this.options.fields = {};
        this.learnMode = true;
    }


    p.runNircmd = function runNircmd(args, fxDone) {
        if ( sh.isString( args )) {
            args = args.split(' ');
        }
        var cmd = new CommandRunner()
        var settings = {}
        settings.silent = self.silent
        settings.fxCallback =
            function commandFinished() {
            console.log(cmd.log.output)
            sh.callIfDefined(fxDone);
        }
        settings.cmd = 'nircmd.exe'
        settings.args = args;
        cmd.execute(settings)
            console.log('run', args)
    }

    p.beep = function beep() {
        var cmd = new CommandRunner()
        var settings = {}
        settings.silent = self.silent
        settings.fxCallback =  function commandFinished() {
            console.log(cmd.log.output)
        }
        settings.cmd = 'nircmd.exe'
        settings.args = ['beep', '17000', '2000'];
        cmd.execute(settings)
    }

    p.trayBalloon = function trayBalloon(text, duration) {
        duration = sh.defaultValue(duration,10000)
        self.utils.nircmd('trayballoon',
            "Alert", text ,"shell32.dll,22", duration )
        // speak text "Please visit the Web site of NirSoft at http://www.nirsoft.net" 2 80
    }

    p.speak = function speak(text,rate) {
        rate = sh.defaultValue(rate,-5)
        self.utils.nircmd('speak',
            "text", text, rate, 100 )
    }

    p.infobox = function infobox(text, title ) {
        self.utils.nircmd('infobox',text, title  )
    }
    p.alert = p.infobox

    p.growl = function beep() {
        self.utils.nircmd('beep', '50', '2000')
    }
    p.growl_roll = function growl_roll() {
        var async = require('async');
        var cmds = [];
        cmds = [
            ['beep', '50', '2000'],
            ['beep', '90', '2000'],
            ['beep', '50', '2000'],
            ['beep', '90', '500'],
            ['beep', '90', '500'],
            ['beep', '50', '2000']
        ]
        async.forEachLimit(cmds,
            1, function(cmdArgs, callback) {
                cmdArgs.push(callback)
                self.utils.nircmd.apply(this, cmdArgs)
                // callback()
            }, function(err) {
                if (err) console.error(err)
                // fxCallbackTestComplete();
            });
        // self.utils.nircmd('beep', '50', '2000')
    }

    p.utils = {}
    p.utils.nircmd  = function nircmd(   ){
        arguments = sh.convertArgumentsToArray(arguments)
        var callback = null;
        var lastElement = arguments[arguments.length-1]
        if ( sh.isFunction(lastElement) ) {
            callback = lastElement
            arguments.pop()
            //arguments = arguments.slice(-1)
        }
        var cmd = new CommandRunner()
        var settings = {}
        settings.fxCallback =  function commandFinished() {
            console.log(cmd.log.output)
            if ( callback != null ) { callback() }
        }
        settings.cmd = 'nircmd.exe'
        settings.args =arguments;
        cmd.execute(settings)
    }

    p.keyPress = function keyPress( ) {
        //args = [args.join('+')]
        //self.utils.nircmd(args)

        var args = sh.convertArgumentsToArray(arguments);
        var keyStroke = [args.join('+')]
        self.utils.nircmd('sendkeypress', keyStroke)
    }

    p.keyPress2 = function keyPress2( ) {
        var args = sh.convertArgumentsToArray(arguments);
        if ( self.delayKey != null ) {
            self.delayKeyIndex++
            var delay = self.delayKey*self.delayKeyIndex
            var array = [self.keyPress, delay]
            array = array.concat(args)
            setTimeout.apply(self, array)
            self.proc(delay)
            return;
        }
    }

    /**
     * Send keys one after the other
     */
    p.sendKeys = function sendKeys( string ) {
        /*if ( self.delayKey != null ) {
            self.delayKeyIndex++;
            var delay = self.delayKey*self.delayKeyIndex
            setTimeout(self.sendKeys
                , delay, arguments)
            self.proc(delay)
            return;
        }*/
       /* sh.each(string, function sendKey(i,char){
            self.utils.nircmd('sendkey ', char)
        })*/

        var args = sh.convertArgumentsToArray(arguments);
        var keyStroke = [args.join(' ')]
        self.utils.nircmd('sendkeypress', keyStroke)

    }

    p.sendKeys2 = function sendKeys2( string ) {
        var args = sh.convertArgumentsToArray(arguments);
        if ( self.delayKey != null ) {
            self.delayKeyIndex++;
            var delay = self.delayKey*self.delayKeyIndex

            var array = [self.sendKeys, delay]
            array = array.concat(args)
            setTimeout.apply(self, array)
            self.proc(delay)
            return;
        }
    }


    p.proc = function proc(options ){
        console.log(this.options)
    }



}

exports.NirCmdHelper = NirCmdHelper;

if (module.parent == null) {

    var p = new NirCmdHelper();
  //  p.growl()
    // p.growl_roll()
    //p.trayBalloon('this is an error')
    //p.speak('bidding. barti!')
    //p.speak('building party')
    //p.infobox('building party', 'ok?')
    /*p.keyPress('lwin', 'r')
    p.sendKeys('mstsc')
    p.keyPress('enter')
        ['127.0.0.1:9004']
        ['alt', 'n']*/


    var args = sh.getNodeArguments()
    if ( args.length > 0 ) {
       "sendkey ctrl+s"
    }
    //testRDC();

    //wmic desktopmonitor get screenheight, screenwidth
    //http://nircmd.nirsoft.net/sendkeypress.html
    // p.speak('bilding pahti ', 3)
}



function testRDC(){

    p.delayKey=300
    p.delayKeyIndex=0

    p.keyPress2('lwin', 'r')
    p.sendKeys2('mstsc')
    p.keyPress2('enter')
    p.sendKeys2('127.0.0.1:9004')
    p.keyPress2('alt', 'n')

    //http://stackoverflow.com/questions/9637519/batch-list-open-windows

    //http://stackoverflow.com/questions/9637519/batch-list-open-windows
    /*
    need: task list manager. show all processes
    get information from processes
    diff, show which have been opened
    */

    return;

    var self = {}
    p = self;
    var options = {}
    var token = sh.clone(options)
    token.prePrepend = 'http://'+ 'localhost'+':'+self.settings.port +
        '/' + self.taskSettings.name + '/'
    self.token = token
    var work = new PromiseHelper();
    work.name = 'Test Chain'
    work.wait = token.simulate==false;
    work.startChain(token)
        .add(self.startTask)
        .add(self.sendMethod)
        .add(self.updateTask)
        .add(self.getResults)
        .add(self.updateNonSync)
        .end();
    p.startTask = function startTask(token, cb) {
        var options = {}
        options.method = 'POST'
        options.url = 'http://'+ 'localhost'+':'+self.settings.port +
            '/' + self.taskSettings.name + '/' + 'run'

        var form = {}
        var settings = {}
        settings.harFile='C:/Users/user1/Dropbox/projects/crypto/proxy/verifications/shahankpayrollfix.2.c'
        settings.harFileBaseDir = 'c:/trash/harfiles'
        settings.portProxy=6688
        settings.launchUrl = false;
        settings.exitProcess = false;

        //settings.openUrl=true
        form.input = settings
        options.form = form
        request(options, function onServerStarted   (error, response, body)  {
            self.proc(body)
            cb( )
            //
            ///open('http://localhost:7789/geetguid3.htm')
        } )

    }
}