/**
 * Created by user1 on 4/27/14.
 * Used to help load properties files
 */
var sh = require('shelpers').shelpers
var properties = require('properties')
var fs = require('fs')
var path = require('path')

function SettingsHelper() {
    var p = SettingsHelper.prototype
    var self = this;

    self.defaultSettings={}
    self.dirs = []
    /**
     * Specify where to load config files form firsts
     * allows defaults to be stored in shared location,
     * but defaults can be overriden by configs on user's machine
     * @param dirs
     */
    p.dirPrecedense = function dirPrecedense(dirs) {
        self.dirs = dirs;
    }
    p.loadOptions = function loadOptions( config_file, fxCallback, dirs_, propertiesLoadSettings) {
        var isString = false;

        if ( config_file == null || config_file == '' ) {
            console.log('config file was undefined', config_file)

            fxCallback(self.defaultSettings)
            return
        }

        //can send contents or a file, or a file path ()
        if ( ! sh.isString(config_file)){
            var settingsObject = config_file;
            //these are instructions for loading a config
            if ( settingsObject.object == null ) {
                fxCallback = settingsObject.fxCallback
                dirs_ = settingsObject.dirs;
                propertiesLoadSettings = settingsObject.propertiesLoadSettings
                if ( sh.isString(settingsObject.contents)){
                    isString = true
                    config_file = config_file.contents;
                }
            } else
            {
                //user passed in a preparsed object ...
                //merge and bail
                self.fxLoadCompleteCallback = fxCallback
                var preparedObject =  settingsObject.object
                self.mixingLoadedSettingsOnDefaults(preparedObject);
                return;
            }
        }
        self.fxLoadCompleteCallback = fxCallback


        //try to load the file
        if ( isString == false ) {
            if ( dirs_ != null ) {
                self.dirs = dirs_;
            }
            var config_file_path = config_file
            var abs = fs.existsSync(config_file)
            if ( abs == false ) {
                config_file_path = null
                sh.each(self.dirs, function( prop, dir ) {
                    var fileName = path.join(dir, config_file)
                    var doesConfigExist = fs.existsSync(fileName)
                    if ( doesConfigExist != false ) {
                        config_file_path = fileName
                        config_file = fileName; //return
                        return false;
                    }
                })
            }
            //go through dirs of presence
            if ( config_file_path == null) {
                throw new Error('could not load config file '+
                    config_file + ' ' + process.cwd() )
            }
        }

        //feature: check if file is json file and does not need to be 'parsed'
        var contents = sh.readFile(config_file)
        if ( contents.slice(0,1)== '{'){
            var preparedObject = JSON.parse(contents);
            self.mixingLoadedSettingsOnDefaults(preparedObject);
            return
        }

        if ( propertiesLoadSettings == null ) {
            propertiesLoadSettings = { path: true }
        }

        propertiesLoadSettings.sections = true
        properties.parse (config_file, propertiesLoadSettings, function (error, loadedSettings){
            if (error) return console.error (error);
            console.log (loadedSettings);
            //{ a: 1, b: 2, b: 3 }
            //override with value
            self.mixingLoadedSettingsOnDefaults(loadedSettings);
        });


    }
    p.mixingLoadedSettingsOnDefaults = function  mixingLoadedSettingsOnDefaults(loadedSettings) {
        var mixedOptions = sh.clone(self.defaultSettings)
        sh.each(loadedSettings, function( prop, value ) {
            mixedOptions[prop]=value
        })
        self.fxLoadCompleteCallback(mixedOptions)
    }

    p.proc = function proc(options ){
        console.log(this.options)
    }


    p.show = function proc(optionsSetOnThisObj ){
        console.log(this.options)

        if ( optionsSetOnThisObj != null ) {
            //only show proerties in options
            console.log('item')
            console.log(optionsSetOnThisObj)
        }
    }

    /**
     * If you have a config file that has a minutes property
     * this will make sure it is valid, or return a null
     * @param minutes
     */
    p.parseConfigMinutesToMS = function parseConfigMinutesToMS(minutes, humanName) {
        var parsedTime = Number(minutes) * 60 * 1000;
        if ( isNaN(parsedTime)) {
            throw 'tried to parse ' + minutes  + ' '  + humanName
        }
        return parsedTime;
    }
}

/**
 * Convert elements
 * Example reroute.userAccounts.dirStatic=C:/Users/user1/Dropbox/projects/qtp/flex/UA/bin-debug
 reroute.userAccounts.appCode=UA

 {useraccounts}
 * @param settings
 */
SettingsHelper.convertSettingsDots =  function convertSettingsDots(settings) {

}

/**
 * A wrapper method that generates helper and invokes the load on it
 * @param loadConfig
 * @returns {SettingsHelper}
 * @constructor
 */
SettingsHelper.LoadSettings =  function SettingsHelper_LoadSettings(loadConfig) {
    /*
     //load config
     var defaultSettings = {}
     defaultSettings.default = true
     var settingsHelperConfig = {}
     settingsHelperConfig.file = configFilePath;
     settingsHelperConfig.defaultSettings = defaultSettings;
     //settingsHelperConfig.searchPaths = null;//
     settingsHelperConfig.fxResult = function onSettingsLoadedHandler(settings){
     self.proc('options', settings)
     //go to original settings
     self.loadSettings(settings)
     }
     self.helper = SettingsHelper.LoadSettings(settingsHelperConfig);
     //JSON_Party_Save_Personal.har noChanges.json n1 PARTY westwest Test1234 1234 09174445
     */

    //backup paths to search for file. Users can easily override it
    var searchPaths = sh.defaultValue(
        loadConfig.searchPaths, ['c:/trash', 'c:/trash/configs'])
    // function ( options ){
    //  console.log('options', options)
//}
    var fxResult = loadConfig.fxResult;
    var file = loadConfig.file;
    if ( loadConfig.input != null ) {
        if ( sh.isString(loadConfig.input ) ) {
            file = loadConfig.input
        } else {
            //this is a json object user has sent
            var jsonObject = loadConfig.input;
            file = {};
            file.object = jsonObject;
            //todo make this agnostic
        }
    }
    var p = new SettingsHelper();
    p.defaultSettings = loadConfig.defaultSettings;

    function makeArray( val ) {
        var nullValIsArray = true
        if ( val == null ) {
            if ( nullValIsArray ) {
                return []
            }
        }
        var split = val.split(',')
        var split = split.map(function(val){
            return sh.strip(val)
        });
        return split;
    }

    function fxHandlePostProccessing(settings) {
        //feature: convert string fields into arrays
        if ( loadConfig.arrayFields != null  ) {
            sh.each(loadConfig.arrayFields, function processFields(inxde,field) {
                var val = settings[field]
                if ( sh.isString(val) == false ) {
                    return; //prob an array
                }
                settings[field] = makeArray(val)
            })
        }
        //process: object fields, convert lines to objects
        //convert lines to objects
        //input:
        //intercept/landing.swf=C:/oracle/middleware/user_projects/domains/png/autodeploy/landing_static/landing.swf"},
        //intercept/party.swf=C:/oracle/middleware/user_projects/domains/png/autodeploy/party_static/party.swf"},
        //output
        //intercept={landing.swf:c:/, party.swf:c:/}
        if ( loadConfig.objectFields != null  ) {

            //loadConfig.objectFields ['intercept/']
            sh.each(loadConfig.objectFields, function processObjectFields(inxde,field) {
                var parsedObject = {} //var parsedObject = []
                //field == 'intercept/'

                sh.each(settings, function processFields(settingsKey,val) {
                    //key == intercept/landing.swf=C:/oracle/middleware/user_projects/domains/png/autodeploy/landing_static/landing.swf"},
                    if ( sh.includes(settingsKey, field)) { //intercept/landing.swf, intercept/
                        var split = settingsKey.split('/');
                        var newField = split[0]
                        var newKey = split[1]
                        //var arrayObj = {}
                        //arrayObj[newKey] = val;
                        //parsedObject.push(arrayObj)
                        parsedObject[newKey]=val
                        delete settings[settingsKey];
                    }

                })
                field = field.slice(0,-1) //remove slash
                //set object on settings
                settings[field] = parsedObject;


            })
        }


        fxResult(settings)
    }
    p.loadOptions(file, fxHandlePostProccessing, searchPaths)
    return p;
}

//V2: Simplified interface
SettingsHelper.mergeSettings = function mergeSettings(mixThis, intoThis_IfPropNotNull) {
    if ( mixThis == null ) {
        mixThis = {};
    }
    if ( intoThis_IfPropNotNull == null ) {
        intoThis_IfPropNotNull = {};
    }
    sh.defaults(mixThis, intoThis_IfPropNotNull )
    return intoThis_IfPropNotNull;
}

SettingsHelper.param = function param(obj, propName, desc, defaultValue) {
    var currentVal = obj[propName];
    obj[propName] = sh.dv(currentVal, defaultValue);
}



exports.SettingsHelper = SettingsHelper

if (module.parent == null) {

    var p = new SettingsHelper();
    p.defaultSettings = {h:4}
    p.loadOptions('config', function ( options ){
        console.log('options', options)
    }, ['c:/trash', 'c:/trash/configs'])


    var p = new SettingsHelper();
    p.defaultSettings = {h:4}
    p.loadOptions('config.txt', function ( options ){
        console.log('options', options)
    }, ['c:/trash', 'c:/trash/configs'])
    /*if (script_args[0] != null ) {
     var config_file = script_args[0]
     properties.parse (config_file, { path: true }, function (error, obj){
     if (error) return console.error (error);

     console.log (obj);
     //{ a: 1, b: 2, b: 3 }

     //ovverride with vals
     sh.each(obj, function( prop, value ) {
     settings[prop]=value
     })

     startupPRoxy()
     });
     } else {
     startupPRoxy()
     }*/
}
