/**
 * Created by user1 on 4/27/14.
 * Makes servers 'rebootable' hot-swappable
 * will send request to kill another server
 */
var sh = require('shelpers').shelpers
var properties = require('properties')
var fs = require('fs')
var request = require('request')

function ExpressServerHelper() {
    var p = ExpressServerHelper.prototype
    var self = this;

    p.proc = function proc(options ){
        if ( self.silent == true) {
            return
        }
        sh.sLog(arguments)
    }


    p.setup = function setup(app, exitProcess, fxExit, id, _self) {
        self.app = app
        app.get('/exit', function exitFromServerProcess(req, res) {
            self.proc('header exit request', id, _self)
            res.end();
            if (exitProcess != false && exitProcess != "false") {
                setTimeout(function endLater() {
                    process.exit()
                }, 500)
            }
            if (fxExit != null) {
                fxExit()
            }
            if (self.server != null) {
                try {
                     self.server.close(function() {
                         console.log("Closed out remaining connections.");
                       //  process.exit()
                     });
                }catch ( e )
                {
                    console.error(e)
                }
            }

        })

        return
        process.on('uncaughtException', self.uncaughtExceptionHandler)
        //remove lisnter ...
        setTimeout(function removeUncaught() {
            process.removeListener('uncaughtException', self.uncaughtExceptionHandler)
        }, 2000)
    }


    p.uncaughtExceptionHandler = function uncaughtExceptionHandler(err) {
        if(err.errno === 'EADDRINUSE') {
            console.log('...');
            console.log("\n", 'you already have the server running, shut down that instance', self.id)
            //jump port
        }
        else {

            console.error(err);
            console.error(  err.stack);
            console.error(  err.message);
            //throw err
            setTimeout(function showError() {
                //process.exit(1);
                throw err
            }, 500)
            //showError()

        }
    }

    /**
     * Will destroy the old server if found
     * @param fxCallback
     */
    p.exitExisting = function exitExisting(fxCallback, serverPortNumber) {
        var options = {}
        options.url = 'http://localhost:'+serverPortNumber+'/exit'
        self.proc('serverPortNumber', serverPortNumber);
        if ( sh.isNull(serverPortNumber)){
            throw new Error('need a valid port number')
        }
        options.timeout = 1500 //wait before assume previous instance does not exist
        request(options, function onExitResponse (error, response, body) {
            self.proc('...',serverPortNumber, error, body) //you will get errof if alreadyended
            sh.waitXSecs(1, function attemptToStartServer() {
                sh.callIfDefined(fxCallback)
            }, 'attemptToStartServer')

        })
    }

    p.startup = function startup(fxCallback, serverPortNumber) {
        p.exitExisting(fxCallback, serverPortNumber)
    }


}



exports.ExpressServerHelper = ExpressServerHelper

if (module.parent == null) {

}
