/**
 *
 *
 * @type {{}}
 */
var Qh = {}
Qh.dict = {}
Qh.successP = function generateSuccessPlaceholder() {
    var randomId = Math.random() + Math.random(); //just use the time
    //Qh.dict[randomId]=
    Qh.lastSuccessRandomId = randomId;
    var fxLookup = function () {
        return Qh.dict[randomId].apply(null, arguments)
    }
    return fxLookup
}
Object.defineProperty(Qh, "success", {
    get: function () {
        return Qh.successP();
    },
    set: function (value) {
        Qh.dict[Qh.lastSuccessRandomId] = value
    },
    enumerable: false,
    configurable: false
});
Object.defineProperty(Qh, "s", {
    get: function () {
        return Qh.successP();
    },
    set: function (value) {
        Qh.dict[Qh.lastSuccessRandomId] = value
    },
    enumerable: false,
    configurable: false
});


Qh.failureP = function generateFailurePlaceholder() {
    var randomId = Math.random() + Math.random(); //just use the time
    //Qh.dict[randomId]=
    Qh.lastFailureRandomId = randomId;
    var fxLookup = function () {
        return Qh.dict[randomId].apply(null, arguments)
    }
    return fxLookup
}
Object.defineProperty(Qh, "failure", {
    get: function () {
        return Qh.failureP();
    },
    set: function (value) {
        Qh.dict[Qh.lastFailureRandomId] = value
    },
    enumerable: false,
    configurable: false
});
Object.defineProperty(Qh, "f", {
    get: function () {
        return Qh.failure;
    },
    set: function (value) {
        Qh.failure = value
    },
    enumerable: false,
    configurable: false
});

Qh.callbacksSetFirst = [] ;
Qh.createId = function createId() {
    var randomId = Math.random() + Math.random();
    return randomId;
}
Qh.addQhProp = function addQhProp(name) {
    var lastNameId = 'last'+name+'Id'
    var generatePropMethodName = name+'P'
    Qh[generatePropMethodName] = function generatePropByName() {
        var randomId = Math.random() + Math.random(); //just use the time
        //Qh.dict[randomId]=
        //console.debug('making random id', name, randomId)
        Qh[lastNameId] = randomId;
        var fxLookup = function () {
            return Qh.dict[randomId].apply(null, arguments)
        }
        return fxLookup
    }
    Object.defineProperty(Qh, name, {
        get: function () {
            return Qh[generatePropMethodName]();
        },
        set: function (value) {
            //console.debug('storing random id', name, Qh[lastNameId])
            //let us set if first if needed
            Qh.dict[Qh[lastNameId]] = value
            Qh[lastNameId] = null
        },
        enumerable: false,
        configurable: false
    });

}



Qh.addQhProp('f1')
Qh.addQhProp('f2')

/**
 * Design  Question: Why use random ids? why not store the damn callback
 *
 * I want warnings when this does not work properly
 * @type {{}}
 */
//why use random ids? here is an implementation that just names functions
Qh.namedCallbacks = {} ;
Qh.namedCallbacks_Storage={};

Qh.addQhProp2 = function addQhProp(name) {
    var callbackKeyName = ''+name+'CallbackKeyId'
    var lastNameId = 'last'+name+'Id'
    /*
     var generatePropMethodName = name+'P'
     Qh[generatePropMethodName] = function generatePropByName() {
     var randomId = Math.random() + Math.random(); //just use the time
     //Qh.dict[randomId]=
     //console.debug('making random id', name, randomId)
     Qh[lastNameId] = randomId;
     var fxLookup = function () {
     return Qh.dict[randomId].apply(null, arguments)
     }
     return fxLookup
     }
     */
    Object.defineProperty(Qh, name, {
        get: function () {
            /*if ( Qh.namedCallbacks[callbackKeyName] == null ){
             Qh[generatePropMethodName]();
             } else {*/
            Qh.namedCallbacks[callbackKeyName] = function keyCallbackKeyLookup() {
                return Qh.namedCallbacks_Storage[callbackKeyName].apply(null, arguments)
            }
            // }
            return Qh.namedCallbacks[callbackKeyName];
        },
        set: function (callbackFx) {
            Qh.namedCallbacks_Storage[callbackKeyName] = callbackFx
            return;
            //console.debug('storing random id', name, Qh[lastNameId])
            //let us set if first if needed
            if  ( Qh[lastNameId] = null ) {
                //generate()
                var id = Qh.createId();
                Qh.setFirst.push(id)
                Qh[lastNameId] = id
            }
            Qh.dict[Qh[lastNameId]] = value
            Qh[lastNameId] = null
        },
        enumerable: false,
        configurable: false
    });

}


Qh.addQhProp2('c1')
Qh.addQhProp2('c2')
Qh.addQhProp2('c3')


/**
 * Creates localVersion of QH so callbakcs don't intertfere  with
 * callbaksk from other scopes
 */
Qh.localVersion = function createLocalVersionOfQh() {
    var localQh = {}  ;
    localQh.namedCallbacks = {} ;
    localQh.namedCallbacks_Storage={};

    localQh.addQhProp2 = function addQhProp(name) {
        var callbackKeyName = ''+name+'CallbackKeyId'
        var lastNameId = 'last'+name+'Id'

        Object.defineProperty(localQh, name, {
            get: function () {
                localQh.namedCallbacks[callbackKeyName] = function keyCallbackKeyLookup() {
                    return localQh.namedCallbacks_Storage[callbackKeyName].apply(null, arguments)
                }
                // }
                return localQh.namedCallbacks[callbackKeyName];
            },
            set: function (callbackFx) {
                localQh.namedCallbacks_Storage[callbackKeyName] = callbackFx
                return;
            },
            enumerable: false,
            configurable: false
        });

    }
    localQh.addQhProp2('s1')
    localQh.addQhProp2('s2')
    localQh.addQhProp2('s3')
    localQh.addQhProp2('f1')
    localQh.addQhProp2('f2')
    localQh.addQhProp2('f3')
    return localQh;
}


exports.qh = Qh;

if ( module.parent == null ) {



}