/**
 * Created by user1 on 2/7/14.
 *
 *
 * 1 find content on piratebay
 * 2 download content via put.io to blasdf
 * 3 iterate over content, add rotten tomato information
 * 4 add new content to db
 *
 * insight:  seperate rotten as a later step
 * get content first
 */

/**
 *
 */

var sh = require('shelpers').shelpers
var PromiseHelper = require('shelpers').PromiseHelper;
var OptionsHelper = require('shelpers').OptionsHelper
var SettingsHelper = require('shelpers').SettingsHelper
var fs = require("fs")
var async = require('async');

/*
 with new promise helpers
 search for content, query==>url
 */
function PromiseHelperTemplate() {

    var p = PromiseHelperTemplate.prototype;
    p = this;
    var self = this;

    function defineLoadConfig() {
        p.loadConfig = function loadConfig(configFile) {
            var defaultSettings = {};
            defaultSettings.dirDownload = null
            defaultSettings.throwErrorWhenQueryNotFound = false;
            var sH = new SettingsHelper();
            self.settingsHelper = sH;
            sH.defaultSettings = defaultSettings;

            //self.data.configFile = configFile;
            sH.loadOptions(configFile, function doneLoadingSettingsFile(settings) {
                self.proc('options', settings)
                self.settings = settings;
                self.go(settings)
            }, ['c:/configs/, c:/trash', 'c:/trash/configs'])
        }
    }
    defineLoadConfig();

    self.go = function go(options) {

        var paramsHelper = new OptionsHelper();
        paramsHelper.loadOptions(options)
        var fxCallback = paramsHelper.addOption('callback', 'completion callback', true)
        var query = paramsHelper.addOption('query',
            'what torrent to look for', true)

        //7/20/14: tired of copying properties, use optionsHelpers for validation
        //but not much else
        var token = sh.clone(options)
        self.token = token
        token.query=query
        token.fxCallback=fxCallback;
        token.bail = false
        token.test = options.test;
        //placeholders
        token.urlTorrent = null
        token.urlMagnet = null

        var work = new PromiseHelper();
        work.name = 'Template Chain'
        work.wait = token.simulate==false;
        work.startChain(token)
            .add(self.searchByName)
            .log()
            .add(self.downloadPutIoFile)
            .log()
            .end();
    }

    function defineWork() {
        p.searchByName = function searchByName(token, cb) {
            if ( token.query == null ) {
                cb();
                return;
            }
            var SearchPB //= require('./SearchPB').SearchPB
            var options = {}
            options.query = token.query
            sh.mergeObjects(token, options)
            var go = new SearchPB()
            options.callback = function onDone(url){
                token.urlTorrent = url;
                self.proc('token.urlTorrent', url)
                cb();
            }

            go.go(options);

        }

        p.downloadPutIoFile = function downloadPutIoFile(token, cb) {
            cb()
        }

        p.uploadToMegaUpload = function uploadToMegaUpload(token, cb) {

        }
    }
    defineWork()

    function createLogic() {
        p.logic = {}
        /**
         * return urlMagnet
         * @param token
         * @param cb
         */
        p.logic.returnMagnetLink = function returnMagnetLink(token, cb) {
            self.proc(token.torrentName)
            cb()
            token.fxCallback(token.urlMagnet)

        }
    }
    createLogic();

    function defineUtils() {
        p.utils = {}
    }
    defineUtils();

    p.proc = function proc() {
        sh.sLog(arguments)
    }
}

if (module.parent == null) {
    var args = process.argv.splice(2);

    if ( args.length > 0 ) {
        var options = {}
        options.callback = function onDone(url) {
            console.log('done', url)
        }

        var firstArg = args[0]
        options.query = query;

        var go = new PromiseHelperTemplate()

        if (args.length == 2) {
            var dirDownload = args[1]
            options.dirDownload = dirDownload;
        }

        go.go(options);
        return;
    }

    var options = {}
    options.callback = function onDone(url){
        console.log('done', url)
    }
    options.query = '5th Element'
    var go = new PromiseHelperTemplate()
    go.go(options);
    return;

}