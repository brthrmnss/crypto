/**
 * Created by user on 7/20/15.
 */



var isNode = true

if (typeof exports === 'undefined' || exports.isNode == false) {
    isNode = false
}

if ( isNode ) {
    var sh = require('shelpers').shelpers
    var properties = require('properties')
    var fs = require('fs')
    var path = require('path')
}



//console.log(ex1)

function convertMiniJSONtoJSON(lines, file) {
    var lines = lines;
    if ( file != null ) {
        lines = sh.readFile(file)
    }
    lines = lines.split('\n');
    var obj = {}
    var baseObj = {}
    obj = baseObj;
    var lastTabLength = 0;
    var currentTabLength = 0
    var lastLineBlank = false
    var lastK = null;
    var inArray = null;
    var levelUp = null;
    var blankLine = false

    var breadcrumbs = [obj] //stores level-up items

    sh.each(lines, function eachLine(i,line) {
        var k = null;
        var v = null;
        var madeNewObj = false;
        if ( line.trim() == '' ) {
            lastLineBlank = true;
            blankLine = true;
            return;
        }


        var split = line.trim().split(' ');
        k = split[0];
        v = split.slice(1).join(' ')
        if ( line.indexOf(':') != -1 ) {
            split = line.split(':')
            k = split[0];
            v = split.slice(1).join(' ')
        }
        k = k.trim();
        console.log(  i+1, line, k, v)
        currentTabLength = line.split("\t").length
        var tab = "\t";
        if ( line.indexOf(tab) == -1 ) {
            var tabLongString = "    "
            currentTabLength = line.split(tabLongString).length;

            /*if ( sh.startsWith(line, '  ') && line.indexOf(tabLongString) == -1 ) {
                currentTabLength = line.split("  ").length;

                if ( sh.startsWith(line, '~') && line.indexOf('~') == -1 ) {
                    currentTabLength = line.split("~").length;
                }

            }*/
        }
        currentTabLength-= 1
        if ( blankLine ) {
          //  lastTabLength = currentTabLength
          //  return;
        }

        var tabsChanged = lastTabLength < currentTabLength ;

        console.log('log', currentTabLength ,lastTabLength);//, currentTabLength2)
        if (currentTabLength > lastTabLength  ) {
            levelUp = obj;
            inArray = [];
            obj[lastK] =inArray
            breadcrumbs.push(obj)
            obj = {};

            inArray.push(obj);
            console.log('new itemA:', '...',levelUp,lastK  );
            madeNewObj = true
        }
        if (currentTabLength < lastTabLength  ) {
            console.log('br', breadcrumbs)
            obj = breadcrumbs.pop()
            levelUp = breadcrumbs.slice(-1)[0];
            console.log('backup itemB:', '...',levelUp,lastK ,null );
            madeNewObj = true; //adjust object ... do not make array
        }
        lastTabLength = currentTabLength
        if (k.trim() != '') {
            lastK = k;
        }
        if ( lastLineBlank  || tabsChanged ) {
            if ( madeNewObj != true ) {
                obj = {};
                inArray.push(obj);
                console.log('new item', sh.qq(line))
            }
        }
        lastLineBlank = false;

        if ( v != null && v != '' ) {
            obj[k] = v;
        }
        console.log(k,v, sh.paren(lastK))
        console.log()

    });

    if ( file != null ) {
         sh.writeFile(file+'.json', sh.toJSONString(baseObj));
    }
    return baseObj
}


if ( isNode &&  module.parent == null ) {
    var ex1 = sh.readFile('ex1.txt');
    var ex2 = sh.readFile('ex2.txt');

    var obj = sdf(ex1, 'ex1.txt')
//console.log(sh.toJSONString(obj))

    var obj = sdf(ex2, 'ex2.txt')
    console.log(sh.toJSONString(obj))
//console.log(ex2)
}
