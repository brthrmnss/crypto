var shelpers = require('shelpers')
var sh = shelpers.shelpers;
var PromiseHelperV3 = shelpers.PromiseHelperV3;
var express = require('express'),
    expressRest = require('express-rest');
var GenerateData = shelpers.GenerateData;
var  test = {}

var RestHelper = shelpers.RestHelper;
var Sequelize = require('sequelize')
var sequelize = null;

/*
Quick Test wrapper for RestHelpers without sql support
....
TODO Remove Duplicate code
 */






function RestHelperJSON_Test() {
    var p = RestHelperJSON_Test.prototype;
    p = this;
    var self = this;
    self.settings = {}
    self.data = {};

    p.init = function init(config) {
        self.settings = sh.dv(config, {});
    }

    p.createServer = function createServer() {

        var express = require('express'),
            expressRest = require('express-rest');

        var app = express();
        //var cors = require('cors')
        //CORS middleware
        var allowCrossDomain = function (req, res, next) {
            res.header('Access-Control-Allow-Origin', 'example.com');
            res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
            res.header('Access-Control-Allow-Headers', 'Content-Type');

            next();
        }

        app.use(function (req, res, next) {
            res.header("Access-Control-Allow-Origin", "*");
            res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
            next();
        })
        //app.use(cors())
        app.use(allowCrossDomain);
        app.listen(5002);

        self.app = app;
    }

    p.createDB = function createDB(config) {

        self.createServer();


        var rH = new RestHelper();
        var taskApiSettings = {}
        var tS = taskApiSettings;
        var initTasks = [];
        initTasks.push({id: 0, name: 'Complete Car'})
        initTasks.push({id: 1, name: 'Complete House'})

        tS.model = initTasks
        tS.name = 'tasks'
        tS.name = 'breadcrumbs'
        tS.file = 'rest_helper/tasks.json'

        tS.createGetPostRoutes = true;
        tS.requiredFields = {name: ""}
        tS.reset = false;
        tS.reset = true;
        tS.server = self.app
        tS.sql = true

        tS.fields = {name: "", desc: "", user_id: 0, content_id: 0}
        //tS.actor = new MySQLAdapater(tS);

        tS.fxReset = function fxReset() {
            GenerateData = shelpers.GenerateData;
            var gen = new GenerateData();
            var model = gen.create(100, function (item, id, dp) {
                item.name = id;
                // item.id = id;
                item.desc = GenerateData.getName();
            });

            return model;
        }
        rH.loadRest(tS);
        self.tasks = rH;
        self.taskApiSettings = taskApiSettings;
        self.tS = tS;
    }

    p.testDB = function testDB() {


        var tasks = self.tasks;
        var taskApiSettings = self.taskApiSettings;
        var tS = self.tS;
        var TestHelper = shelpers.TestHelper;
        var reqPost = TestHelper.reqPost;




        //
        self.settings.port = 5002;

        var types = {};
        types.POST = 'POST'
        types.GET = 'GET'
        types.PUT = 'PUT'

        types.errors = {}
        types.errors.recordDoesNotExist = 'Error: record does not exist'

        function testRestHelper() {
            self.quickRequest = function quickRequest(url, method, fx, postData, doRegPost) {
                if (method == null) {
                    method = types.GET
                }
                var reqoptions = {}
                reqoptions.url = 'http://localhost:' + self.settings.port + '/' + url
                if (postData == null) {
                    postData = {}
                }
                if (method == types.POST || method == types.PUT) {
                    if (doRegPost) {
                        reqoptions.form = postData
                    } else {
                        //reqoptions.json = true
                        //reqoptions.body = "gg"
                        reqoptions.json = true
                        reqoptions.body = postData
                    }
                } else {
                    reqoptions.qs = postData
                }

                reqoptions.method = method
                reqoptions.showBody = true;
                reqoptions.fx2 = function storeContents(body, resp) {
                    console.log(reqoptions.url, 'test ok...')
                    try {
                        body = JSON.parse(body)
                    } catch (e) {

                    }
                    if (fx) {
                        fx(body, resp)
                    }
                };
                reqoptions.name = 'test ' + sh.paren(url)
                console.log('testing...')
                reqPost(reqoptions)
            }


            var verbs = {}
            verbs.actions = {}
            verbs.isJSON = 'isJSON'
            verbs.hasXResults = function hasXResults(amt) {


            }
            //has(6).results()
            //create task
            //list tasks
            //show all tasks
            //create task via put
            //create task


            /*

             new Verb().has(6).isJSON
             json.length == 6

             */


            var token = {}
            var work = new PromiseHelperV3();
            token.silentToken = true
            work.wait = token.simulate == false;
            work.startChain(token);//
            /* */
            /*           .add(self.searchByName)
             .log()
             .add(self.getFirstQuery)
             .add(self.convertMagnetLinkToTorrent)
             .log()
             .add(self.returnMagnetLink)*/
            /*
             .add(self.testGet)
             .add(self.get_create)
             .end();*/


            var data = {}
            data.expectedRecordLength = 100;//tasks.utils.getLength(); //tasks.records.length;
            data.checkRecordSize = function checkRecordSize() {
                return  tasks.lastLength == data.expectedRecordLength
            }
            data.addItem = function addItem() {
                data.expectedRecordLength++;
            }
            data.removeItem = function removeItem() {
                data.expectedRecordLength--;
            }

            data.bodyHasError = function bodyHasError(bodyResponse) {
                if (sh.startsWith(bodyResponse, 'Cannot')) {
                    return true;
                }
                return  sh.includes(bodyResponse, 'Error')
            }

            data.isFailure = function isFailure(resp) {
                return resp.statusCode == 404
            }


            function assert(eq, msg) {
                if (eq == false) {
                    throw new Error(msg);
                }
            }


            function testUtilLinks() {
                self.reset = function reset(token, cb) {
                    if (tasks.busy == true) {
                        //asdf.g.ds
                        work.tryLater();
                        return;
                        //setTimeout(self.reset, 500)
                    }
                    taskApiSettings.model = []
                    GenerateData = shelpers.GenerateData;
                    var gen = new GenerateData();
                    /*taskApiSettings.model = gen.create(100, function (item, id, dp){
                     item.name = id;
                     item.id = id;

                     item.desc = GenerateData.getName();
                     })*/
                    tasks.utils.empty(function onTableCleared() {
                        tasks.resetDp(function doneReset() {
                            data.expectedRecordLength = 100;
                            cb();
                        })
                    })
                    ;
                    // assert(data.checkRecordSize(), 'did not reset')
                }

                self.getLength = function getLength(token, cb) {
                    tasks.utils.getLength(function onGetLength(length) {
                        data.expectedRecordLength = length;
                        cb();
                    })

                }

                self.checkRecordSize = function checkRecordSize(token, cb) {
                    tasks.utils.getLength(function onGetLength(length) {
                        data.expectedRecordLength = length;
                        assert(data.checkRecordSize(), 'did not reset')
                        cb();
                    })
                }

                /**
                 * Checks record size, if fails assert, returns message
                 * @param msg
                 * @param cb
                 */
                self.checkSize = function checkSize(msg, cb) {
                    tasks.utils.getLength(function onGetLength(length) {
                        //data.expectedRecordLength = length;
                        assert(data.checkRecordSize(), msg + [tasks.lastLength ,
                                data.expectedRecordLength].join(','))
                        cb();
                    })
                }


            }

            testUtilLinks();


            function testFauxGetRoutes() {

                work.add(self.reset);
                work.add(self.getLength)
                work.add(self.checkRecordSize);


                self.testGet = function testGet(token, cb) {
                    self.quickRequest('api/' + tS.name , 'get', result, {id: "6"})
                    function result(body) {
                        //return;
                        // tasks.showId(0, 'lll');
                        assert(body.id==6, 'did not reset')
                        cb();
                    }
                }
                //work.add(self.testGet);


                self.get_create = function get_create(token, cb) {
                    self.quickRequest('api/' + tS.name + '/create', 'get', result, {name: "randomTask"})
                    data.addItem();
                    function result() {
                        self.checkSize( 'did not add task properly', cb)
                        //cb();
                    }
                }


                self.get_create_custom = function createCreateMethod(dataValues) {
                    dataValues = sh.dv(dataValues, {name: "randomTask"})
                    function get_create(token, cb) {

                        self.quickRequest('api/' + tS.name + '/create', 'get', result, dataValues)
                        data.addItem();
                        function result() {
                            self.checkSize( 'did not add task properly', cb)
                            //cb();
                        }

                    }
                    return get_create
                }

                //create later records
                work.add(self.get_create);
                work.add(self.get_create);
                work.add(self.get_create);
                work.add(self.get_create);
                work.add(self.get_create);
                work.add(self.get_create);
                work.add(self.get_create);
                work.add(self.get_create);
                work.add(self.get_create);

                self.get_update = function get_update(token, cb) {
                    var newName = "randomTask_@"
                    var idToUpdate = 3;
                    self.quickRequest('api/' + tS.name + '/update', 'get', result,
                        {id: idToUpdate, name: newName})
                    function result() {
                        tasks.getId(idToUpdate, function onGot(item) {
                            assert(item.name == newName, 'did not restfully update task properly')
                            cb();
                        })
                    }
                }
                work.add(self.get_update);


                self.get_update = function get_create(token, cb) {
                    var newName = "randomTask_@"
                    var idToUpdate = 4;
                    self.quickRequest('api/' + tS.name + '/update', 'get', result,
                        {id: idToUpdate, name: newName})
                    function result() {
                        tasks.getId(idToUpdate, function onGot(item) {
                            assert(item.name == newName, 'did not restfully update task properly')
                            cb();
                        })
                    }
                }
                work.add(self.get_update);

                self.get_update_wrong = function get_create(token, cb) {
                    var newName = "randomTask_@"
                    self.quickRequest('api/' + tS.name + '/update', 'get', result, {id: -1, name: newName})
                    function result(body) {
                        var ok =  sh.includes(body, types.errors.recordDoesNotExist);
                        assert(ok,
                            'let me update an invalid task')
                        cb();
                    }
                }
                work.add(self.get_update_wrong);

                self.get_delete = function get_delete(token, cb) {
                    var newName = "randomTask_@"
                    data.removeItem()
                    self.quickRequest('api/' + tS.name + '/delete', 'get', result,
                        {id: 8, name: newName});
                    function result(body) {
                        self.checkSize( 'did not delete task properly', cb);
                        //cb();
                    }
                }
                work.add(self.get_delete);

                self.get_delete_with_id_broken = function get_delete_with_id_broken(token, cb) {
                    var newName = "randomTask_@"
                    // data.removeItem()
                    self.quickRequest('api/' + tS.name + '/delete/' + -1, 'get',
                        result, {id: -1, name: newName})
                    function result(body) {
                        var ok = data.bodyHasError(body)
                        assert(ok,
                            'did not delete task properly broken');
                        self.checkSize(
                            'did not delete task properly', cb)
                    }
                }
                work.add(self.get_delete_with_id_broken);


                self.get_delete_with_id = function get_delete_with_id(token, cb) {
                    data.removeItem();
                    self.quickRequest('api/' + tS.name + '/delete/' + 2, 'get', result, {id: -1})
                    function result(body) {
                        self.checkSize(
                            'did not delete task properly', cb)
                    }
                }
                work.add(self.get_delete_with_id);

            }


            testFauxGetRoutes();


            function testRestRoutes() {

                work.add(self.reset);
                work.add(self.getLength)
                work.add(self.checkRecordSize);

                work.add(self.get_create);
                work.add(self.get_create);


                work.add(self.get_create_custom({name: " rand task2"}))


                work.add(self.checkRecordSize);


                self.testRestGet = function testRestGet(token, cb) {
                    var itemId = 1;
                    self.quickRequest('api/' + tS.name + '/' + itemId, 'get', result)
                    function result(body) {
                        assert(body.id == itemId, 'did not get item')
                        cb();
                    }
                }
                work.add(self.testRestGet);


                self.rest_create = function rest_create(token, cb) {
                    // adsf.g.d
                    self.quickRequest('api/' + tS.name, 'POST', result, {name: " rand task"})
                    data.addItem();
                    function result(body) {
                        self.checkSize('did not add task properly', cb);
                        //assert(data.checkRecordSize(), 'did not add task properly')
                        // ();
                    }
                }
                work.add(self.rest_create);


                self.rest_create_upsert_fail = function rest_create(token, cb) {
                    self.quickRequest('api/' + tS.name, 'POST', result,
                        {name: " rand task2__",upsertQuery:{desc:"<><>"} })
                    //why: supert query? 
                    data.addItem();
                    
                    function result(body) {
                        //self.proc('what?...')
                        console.log('what?...');
                        self.checkSize('upsert, did not add task properly', cb);
                    }
                }
                work.add(self.rest_create_upsert_fail);


                self.rest_create_upsert_2 = function rest_create(token, cb) {
                    self.quickRequest('api/' + tS.name, 'POST', resultOfUpsertQuery,
                        {name: " rand task2",upsertQuery:{name:" rand task2"} })
                    //data.addItem();
                    function resultOfUpsertQuery(body) {
                        //self.proc('what?...')
                        console.log('what?...');
                        self.checkSize('performed upsert, but record was adde, why did you add tag?', cb);
                    }
                }
                work.add(self.rest_create_upsert_2);

                //work.add(self.getLength);
                //work.add(self.checkRecordSize);
                //


                self.rest_update = function rest_update(token, cb) {
                    var newName = "randomTask_@"
                    var idToUpdate = 1
                    self.quickRequest('api/' + tS.name + '/' + idToUpdate, 'PUT', result, {id: idToUpdate, name: newName})
                    function result() {

                        tasks.getId(idToUpdate, function onGot(item) {
                            assert(item.name == newName, 'did not restfully update task properly')
                            cb();
                        })



                    }
                }
                work.add(self.rest_update);


                self.rest_update_wrong = function rest_update_wrong(token, cb) {
                    var newName = "randomTask_@"
                    self.quickRequest('api/' + tS.name + '/' + 9999, 'get', result, {id: 0, name: newName})
                    function result() {
                        assert(tasks.getId(0).name == newName, 'did not add task properly')
                        cb();
                    }
                }
                //work.add(self.rest_update_wrong);

                self.get_update_wrong = function get_create(token, cb) {
                    var newName = "randomTask_@"
                    self.quickRequest('api/' + tS.name + '/' + "-1", 'get', result, {id: -1, name: newName})
                    function result(body, resp) {
                        assert(data.isFailure(resp), 'Updaded invalid id')
                        // assert(sh.includes(body, types.errors.recordDoesNotExist),
                        //     'let me update an invalid task')
                        cb();
                    }
                }
                work.add(self.get_update_wrong);

                self.rest_delete = function rest_delete(token, cb) {
                    var newName = "randomTask_@"
                    data.removeItem()
                    var deleteId = 1;
                    self.quickRequest('api/' + tS.name + '/' + deleteId, 'DELETE', result)
                    function result(body) {


                        self.checkSize(    'did not delete task properly', cb )
                        //assert(data.checkRecordSize(),
                        //   'did not delete task properly')
                        //cb();
                    }
                }
                work.add(self.rest_delete);

                self.rest_delete_with_id_broken = function get_delete_with_id_broken(token, cb) {
                    var newName = "randomTask_@"
                    self.quickRequest('api/' + tS.name + '/delete/' + 6, 'DELETE', result)
                    function result(body) {
                        assert(data.bodyHasError(body),
                            'did not delete task properly broken');
                        //assert(data.checkrecordsize(),
                        //    'did not delete task properly broken');
                        cb();
                    }
                }
                work.add(self.rest_delete_with_id_broken);


                self.rest_delete_with_id = function rest_delete_with_id(token, cb) {
                    data.removeItem();
                    self.quickRequest('api/' + tS.name + '/delete/' + 2, 'get', result, {id: -1})
                    function result(body) {
                        self.checkSize(    'did not delete task properly', cb )
                    }
                }
                work.add(self.rest_delete_with_id);

                self.rest_list = function rest_list(token, cb) {
                    self.quickRequest('api/' + tS.name, 'get', result, {id: -1})
                    function result(body) {
                        self.checkSize( 'did not delete task properly', cb )
                    }
                }
                work.add(self.rest_list);
            }

            testRestRoutes();

            /*

             self.quickRequest('api/'+tS.name+'/update', 'get', null, {id:0, name:"randomTask_@"})
             self.quickRequest('api/'+tS.name+'/update', 'get', null, {id:-1, name:"randomTask_@"})

             self.quickRequest('api/'+tS.name+'/0', 'get', null, {id:-1, name:"randomTask_@"})
             self.quickRequest('api/'+tS.name+'/delete', 'get', null, {id:-1, name:"randomTask_@"})


             //l crud//
             self.quickRequest('api/tasks', 'get', null, {user_id:"6"})
             self.quickRequest('api/tasks', 'put', null, {name:"randomTask"})
             self.quickRequest('api/'+tS.name+'/1', 'get', null )
             self.quickRequest('api/'+tS.name+'/1', 'get', null, {id:-1, name:"randomTask_@"})
             self.quickRequest('api/'+tS.name+'/1', 'delete', null )

             self.quickRequest('api/'+tS.name+'/search', 'get', null, {id:-1, name:"randomTask", __limit:1})
             self.quickRequest('api/'+tS.name+'/search', 'get', null, {id:1, name:"randomTask", __limit:1, __exact:true})


             self.quickRequest('api/'+tS.name+'/0', 'get', null, {id:-1, name:"randomTask_@"})
             self.quickRequest('api/'+tS.name+'/delete', 'get', null, {id:-1, name:"randomTask_@"})
             */


            function testSearchRoute() {

                work.add(self.reset);

                work.add(self.getLength)
                work.add(self.checkRecordSize);

                work.add(self.get_create);
                work.add(self.get_create);
                work.add(self.get_create_custom({name: " rand task2"}))
                /*
                 sh.times = function times(count, fx) {
                 for (var i = 0; i < count; i++) {
                 fx(i);
                 }
                 }
                 sh.times(10, function(i,x){
                 function createItem(token, cb) {
                 self.quickRequest('api/' + tS.name +
                 '/create', 'get', result, {name: "randomTask " + 1})
                 data.addItem();
                 function result() {
                 self.checkSize( 'did not add task properly', cb)
                 };
                 }
                 work.add(createItem);

                 })
                 */
                function defineTestSearch() {


                    self.testQuerySearch = function testQuerySearch(token, cb) {
                        self.quickRequest('api/' + tS.name + '/search',
                            'get', onTestQuerySearch,
                            {query://{name:{$like: '%hat'}
                                ["name LIKE ?", "%1%"]
                                //}
                            })
                        //{query:{name:{$like:'%1%'}}} )
                        function onTestQuerySearch(body) {
                            console.log(body.length, data.expectedRecordLength)
                            assert(data.expectedRecordLength > 10, 'did not get enough results');
                            cb();
                        }
                    }
                    work.add(self.testQuerySearch);


                    self.testQuerySearch_limit = function testQuerySearch(token, cb) {
                        //self.quickRequest('api/'+tS.name+'/search', 'get', result, {query:{name:1}, limit:10} )
                        self.quickRequest('api/' + tS.name + '/search', 'get', result,
                            {query://{name:{$like: '%hat'}
                                ["name LIKE ?", "%1"]
                                //}
                            })
                        function result(body) {
                            assert(body.length > 10, 'did not get enough results')
                            cb();
                        }
                    }
                    work.add(self.testQuerySearch_limit);


                    self.testQuerySearch_limit_1 = function testQuerySearch(token, cb) {
                        self.quickRequest('api/' + tS.name + '/search', 'get', result,
                            {query: {name: 11}, limit: 10})
                        function result(body) {
                            assert(body.length == 1, 'did not get enough results')
                            cb();
                        }
                    }
                    work.add(self.testQuerySearch_limit_1);


                    self.changeDescOnItem = function changeDescOnItem(token, cb) {
                        tasks.getId(11, function onGot(item) {
                            token.item = item;
                            token.newDesc = "Find Desc"


                            tasks.utils.updateItem({desc: "Find Desc"}, item, function onSaved(o) {
                                cb();
                            });


                        })
                    }
                    work.add(self.changeDescOnItem);

                    //return

                    self.testQuerySearch_limit_piecemeal = function testQuerySearch(token, cb) {
                        // tasks.getId(11).desc = 'Find Desc'
                        self.quickRequest('api/' + tS.name + '/search', 'get', result,
                            {name: "10", desc: token.newDesc})
                        function result(body) {
                            assert(body.length == 1, 'did not get enough results')
                            cb();
                        }
                    }
                    work.add(self.testQuerySearch_limit_piecemeal);

                    self.testQuerySearch_limit_piecemealb = function testQuerySearch(token, cb) {
                        // tasks.getId(11).desc = 'Find Desc';
                        self.quickRequest('api/' + tS.name + '/search', 'get', result,
                            {name: "11", desc: tasks.getId(11).desc.slice(0, 6)})
                        function result(body) {
                            assert(body.length == 1, 'search doesn\'t work on wild cards');
                            cb();
                        }
                    }
                    //  work.add(self.testQuerySearch_limit_piecemealb);

                    self.testQuerySearch_limit_piecemealb_findNone = function testQuerySearch(token, cb) {
                        // tasks.getId(11).desc = 'Find Desc';
                        self.quickRequest('api/' + tS.name + '/search', 'get', result,
                            {name: "11", desc: 'llll'})
                        function result(body) {
                            assert(body.length == 0, 'search return more than 0 results for bad query');
                            cb();
                        }
                    }
                    work.add(self.testQuerySearch_limit_piecemealb_findNone);





                    self.testQuerySearch_orderConsitency = function testQuerySearch(token, cb) {
                        // tasks.getId(11).desc = 'Find Desc';
                        self.quickRequest('api/' + tS.name + '/search', 'get', result,
                            {})
                        function result(body) {
                            self.data.lastOrder = sh.each.prop(body, 'id').join(' ')
                            //console.error( )
                            assert(body.length != 0, 'search return more than 0 results for bad query');
                            cb();
                        }
                    }
                    work.add(self.testQuerySearch_orderConsitency);



                    self.testQuerySearch_orderConsitency2 = function testQuerySearch(token, cb) {
                        // tasks.getId(11).desc = 'Find Desc';
                        self.quickRequest('api/' + tS.name + '/search', 'get', result,
                            {})
                        function result(body) {
                            self.data.lastOrder2 = sh.each.prop(body, 'id').join(' ')
                            //console.error(sh.each.prop(body, 'id').join(' ') )
                            assert(body.length != 0, 'search return more than 0 results for bad query');
                            assert(self.data.lastOrder2 == self.data.lastOrder,
                                'Order changed');

                            cb();
                        }
                    }
                    work.add(self.testQuerySearch_orderConsitency2);




                   /* self.rest_list_order_check = function rest_list(token, cb) {
                        self.quickRequest('api/' + tS.name, 'get', result, {id: -1})
                        function result(body) {
                            //console.error(body)
                            console.error(sh.each.prop(body, 'id').join('') )
                            self.checkSize( 'did not delete task properly', cb )
                        }
                    }
                    work.add(self.rest_list_order_check);

                    self.rest_list_order_check2 = function rest_list(token, cb) {
                        self.quickRequest('api/' + tS.name, 'get', result, {id: -1})
                        function result(body) {
                            console.error(sh.each.prop(body, 'id').join('') )
                            self.checkSize( 'did not delete task properly', cb )
                        }
                    }
                    work.add(self.rest_list_order_check2);*/
                }

                defineTestSearch()






                //crud

                /* setTimeout(function () {
                 tasks.showId(0, 'lll');
                 }, 500)*/

            }


            testSearchRoute();




            function testUserId(){
                work.add(self.reset);
                work.add(self.getLength)
                work.add(self.checkRecordSize);



                self.setupUserIdTesting = function setupUserIdTesting(token, cb) {
                    tS.fxUserId = function getUserId(req){
                        return 4;
                    }

                    cb();

                }
                work.add(self.setupUserIdTesting);

                self.testUpdateToUserId = function testUpdateToUserId(token, cb) {

                    var idToUpdate = 1

                    tasks.getId(idToUpdate, function onGot(item) {

                        tasks.utils.updateItem({user_id:4}, item, cb2)

                        function cb2(o) {
                            cb();
                        }
                        //assert(item.dataValues.name == newName, 'did not restfully update task properly')
                        //cb();
                    })


                }
                work.add(self.testUpdateToUserId);


                self.testRestGet = function testRestGet(token, cb) {
                    var itemId = 1;
                    self.quickRequest('api/' + tS.name + '/' + itemId, 'get', result)
                    function result(body) {
                        assert(body.id == itemId, 'did not get item')
                        cb();
                    }
                }
                work.add(self.testRestGet);

                self.testRestGet_BadUserId = function testRestGet(token, cb) {
                    var itemId = 1+10001; //TODO: Delete item first
                    self.quickRequest('api/' + tS.name + '/' + itemId, 'get', result)
                    function result(body) {
                        assert(body == '', 'return item from get you should not have')
                        cb();
                    }
                }
                work.add(self.testRestGet_BadUserId);


                self.rest_create = function rest_create(token, cb) {
                    // adsf.g.d
                    self.quickRequest('api/' + tS.name, 'POST', result, {name: " rand task"})
                    data.addItem();
                    function result(body) {
                        self.checkSize('did not add task properly', cb);
                        //assert(data.checkRecordSize(), 'did not add task properly')
                        // ();

                        //list and get last id?
                    }
                }
                work.add(self.rest_create);


                self.rest_update = function rest_update(token, cb) {
                    var newName = "randomTask_@"
                    var idToUpdate = 1
                    self.quickRequest('api/' + tS.name + '/' + idToUpdate, 'PUT', result, {id: idToUpdate, name: newName})
                    function result() {
                        tasks.getId(idToUpdate, function onGot(item) {
                            assert(item.name == newName, 'did not restfully update task properly')
                            cb();
                        })
                    }
                }
                work.add(self.rest_update);

                self.rest_update = function rest_update(token, cb) {
                    var newName = "randomTask_2_updated"
                    var idToUpdate = 4
                    self.quickRequest('api/' + tS.name + '/' + idToUpdate, 'PUT', result, {id: idToUpdate, name: newName})
                    function result() {
                        tasks.getId(idToUpdate, function onGot(item) {
                            assert(item.name == newName, 'did not restfully update task properly')

                            item.createdAt = new Date(item.createdAt)
                            item.updatedAt = new Date(item.updatedAt)
                            assert(item.createdAt.getTime() != item.updatedAt.getTime(), 'did not restfully update task time properly')
                            cb();
                        })
                    }
                }
                work.add(self.rest_update);


                self.rest_update_wrong = function rest_update_wrong(token, cb) {
                    var newName = "randomTask_@"
                    var idToUpdate = 8
                    self.quickRequest('api/' + tS.name + '/' + idToUpdate, 'get', result, {id: 0, name: newName})
                    function result() {
                        tasks.settings.userId = null;
                        tasks.getId(idToUpdate, function onGot(item) {
                            assert(item.name != newName, 'did not restfully update task properly')
                            cb();
                        })
                    }
                }
                work.add(self.rest_update_wrong);

                self.get_update_wrong = function get_create(token, cb) {
                    var newName = "randomTask_@"
                    self.quickRequest('api/' + tS.name + '/' + "-1", 'get', result, {id: -1, name: newName})
                    function result(body, resp) {
                        assert(data.isFailure(resp), 'Updaded invalid id')
                        // assert(sh.includes(body, types.errors.recordDoesNotExist),
                        //     'let me update an invalid task')
                        cb();
                    }
                }
                work.add(self.get_update_wrong);

                self.rest_delete = function rest_delete(token, cb) {
                    var newName = "randomTask_@"
                    data.removeItem()
                    var deleteId = 1;
                    self.test = {};
                    self.test.deleteId = deleteId;
                    self.quickRequest('api/' + tS.name + '/' + deleteId, 'DELETE', result)
                    function result(body) {


                        self.checkSize(    '__did not delete task properly', cb )
                        //assert(data.checkRecordSize(),
                        //   'did not delete task properly')
                        //cb();
                    }
                }
                work.add(self.rest_delete);

                self.rest_delete_with_id_broken = function get_delete_with_id_broken(token, cb) {
                    var newName = "randomTask_@"
                    self.quickRequest('api/' + tS.name + '/delete/' + 6, 'DELETE', result)
                    function result(body) {
                        assert(data.bodyHasError(body),
                            'did not delete task properly broken');
                        //assert(data.checkrecordsize(),
                        //    'did not delete task properly broken');
                        cb();
                    }
                }
                work.add(self.rest_delete_with_id_broken);


                self.rest_delete_with_id = function rest_delete_with_id(token, cb) {
                    //data.removeItem();
                    self.quickRequest('api/' + tS.name + '/delete/' + self.test.deleteId, 'get', result, {id: -1})
                    function result(body) {
                        self.checkSize(    'did not delete task properly', cb )
                    }
                }
                work.add(self.rest_delete_with_id);

                self.rest_list = function rest_list(token, cb) {
                    self.quickRequest('api/' + tS.name, 'get', result, {id: -1})
                    function result(body) {
                        self.checkSize( 'did not delete task properly', cb )
                    }
                }
                work.add(self.rest_list);


            }

            testUserId();
        }

        testRestHelper();
        //setTimeout(testRestHelper, 5000); //wait for db to create records


    }

    p.proc = function debugLogger() {
        if ( self.silent == true) {
            return;
        }
        sh.sLog(arguments);
    };

}

RestHelperJSON_Test.createRestHelperSansHelper = function createRestHelperSansHelper(name, server, settings){
    var tasks = new RestHelper();
    var taskApiSettings = {}
    var initTasks = [];
    initTasks.push({id: 0, name: 'Complete Car'})
    initTasks.push({id: 1, name: 'Complete House'})
    taskApiSettings.model = initTasks
    taskApiSettings.name = 'tasks'
    //taskApiSettings.name = 'breadcrumbs'
    taskApiSettings.name = name;

    taskApiSettings.file = 'rest_helper/tasks.json'
    var tS = taskApiSettings;
    tS.createGetPostRoutes = true;
    tS.requiredFields = {}
    tS.reset = false;
    //tS.reset = true;
    tS.server = server
    tS.sql = true

    /*if ( tS.fxUserId == null ) {
     tS.fxUserId = function fxUserId() {
     return null
     };
     }*/
    tS.fields = {name: "", desc: "", user_id: 0, content_id: 0}
    tS.actor = new MySQLAdapater(tS);


    tS.fxReset = function fxReset() {
        GenerateData = shelpers.GenerateData;
        var gen = new GenerateData();
        var model = gen.create(100, function (item, id, dp) {
            item.name = id;
            // item.id = id;
            item.desc = GenerateData.getName();
        });

        return model;
    }


    sh.mergeObjects(settings, tS);
    tasks.loadRest(taskApiSettings)
    return tasks;
}


exports.RestHelperJSON_Test = RestHelperJSON_Test




if ( module.parent == null ) {


    var r = new RestHelperJSON_Test();

    r.createDB();
    r.testDB();

    //Essential method
   // function defineTest_SettingsObjectWithoutMysql() {

}

