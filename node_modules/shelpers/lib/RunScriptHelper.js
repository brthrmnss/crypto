var sh = require('shelpers').shelpers;
var shelpers = require('shelpers');

function RunScriptHelper() {
    var p = RunScriptHelper.prototype;
    p = this;
    var self = this;

    self.settings = {};
    self.data = {}

    p.init = function init(config) {
        self.settings = sh.dv(config, {});
        config = self.settings; 

    }

    p.runHidden = function runHidden(contents, fxDone) {
       /* var cmd = ['cmd', '/k', 'start', ]*/
       var cmd = ['start', '/min']
     //   start /min myfile.bat ^& exit

        var fileTempBat = sh.fs.trash('temp.bat')
        sh.writeFile(fileTempBat, contents)
         //   cmd.exe /c start /min myfile.bat ^& exit
      //  var cmd = [' cmd.exe', ' /c',

      var cmd = [   ' start', ' /min', fileTempBat].join(' ')
     //   var cmd = [   ' start', '/c', fileTempBat].join(' ')
     //  var cmd = [ ' cmd.exe', ' /c',  ' start',  '/min', fileTempBat].join(' ')
        cmd += ' ^& exit'
        if( fxDone == null ) {
            return sh.run(cmd)
            return;
        }
        var  y= sh.runAsync(cmd, fxDone);

        y.stdout.on('data', function (data) {   process.stdout.write(data.toString());  });
        //spit stderr to screen
        y.stderr.on('data', function (data) {   process.stderr.write(data.toString());  });

        //myfile.bat ^& exit']
    }

    p.run = function run() {
    }

    p.runTemp = function runTemp(contents) {
        if ( contents.length ) {
            contents =  contents.join(sh.n)
        }
        sh.writeFile( filename, contents )
    }

    p.runNode = function runNode(fileToRun, fx, _cmdNode) {
        var cmdNode = 'node';
        if ( sh.isWin() == false ) {
            cmdNode = '/home/user/.nvm/versions/node/v6.9.5/bin/node'
        }
        cmdNode = sh.dv(_cmdNode, cmdNode)

        var fullNodeCmd = cmdNode + ' '+ fileToRun

        if( fx == null ) {
            return sh.run(fullNodeCmd)
            return;
        }
        var  y= sh.runAsync(fullNodeCmd, fx)



        // var  y = sh.runAsync('node '+ fileToRun)
        //spit stdout to screen
        y.stdout.on('data', function (data) {   process.stdout.write(data.toString());  });
        //spit stderr to screen
        y.stderr.on('data', function (data) {   process.stderr.write(data.toString());  });
        return y;
    }

    p.test = function test(config) {
        /*var d = self.runHidden(`echo test
            dir
        `)*/
        var d = self.runHidden('echo test'+sh.n+
        'dir'
        )
        console.log('d', d.toString())
        d= self.runNode('test_remote_script.js')
        console.log('d', d.toString())
        d= self.runHidden('test_remote_bat.bat')
        console.log('d', d.toString())


        d= self.runHidden('test_remote_bat.bat', function onK(a,b,c){
            console.log('----', a, b,c )
        })
      //  console.log('d', d.toString())

    }

    function defineUtils() {
        var utils = {};
        p.utils = utils;
        utils.getFilePath = function getFilePath(file) {
            var file = self.settings.dir+'/'+ file;
            return file;
        }

        p.proc = function debugLogger() {
            if ( self.silent == true) {
                return;
            }
            sh.sLog(arguments);
        };
    }
    defineUtils()
}

exports.RunScriptHelper = RunScriptHelper;

if (module.parent == null) {
    var instance = new RunScriptHelper();
    var config = {};
    instance.init(config)
    instance.test();
}



