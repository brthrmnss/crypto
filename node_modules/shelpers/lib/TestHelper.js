/**
 * Created by user on 12/16/14.
 *
 * Class is designed to give util methods for testing servers
 *
 */

function log() {
    var args  = []
    //if first arg == false ,

}


var sh = require('shelpers').shelpers
var requestModule = require('request');
request = requestModule.defaults({jar: true, followAllRedirect:true,
    followRedirect: true, rejectUnauthorized:false});


/*
 p.proc = function proc() {
 sh.sLog(arguments)
 }

 */

var proc = function proc() {
    sh.sLog(arguments)
}



var reqPost = null;
function defineUtilsX(){
    /*function reqPost(url, form, fx , name) {
     var reqoptions = {}

     reqoptions.url = url
     reqoptions.form = form
     reqoptions.method = 'POST'
     //url = 'http://127.0.0.1:888' + url
     request(reqoptions, function (error, response, body) {
     self.proc(name, reqoptions.url, response, error, 'body omitted');
     self.proc(name, body);
     fx()
     })
     }*/


    /**
     * Method can identify parent class and manupilate
     * stack trace to acccomodate utility or helper classes
     * Usage case.
     * Making remote request, that fails
     * you want error message ot indicate async initator method,
     * not callback
     * @returns {*}
     */
    function getStackInfo() {
        /*
         Error
         at getStackTrace (/mnt/hgfs/Dropbox/projects/crypto/node_modules/shelpers/lib/TestHelper.js:62:23)
         at getStackInfo (/mnt/hgfs/Dropbox/projects/crypto/node_modules/shelpers/lib/TestHelper.js:66:26)
         at reqPost2 (/mnt/hgfs/Dropbox/projects/crypto/node_modules/shelpers/lib/TestHelper.js:129:26)
         at Object.verifyResponse (/mnt/hgfs/Dropbox/projects/crypto/node_modules/shelpers/lib/ExpressServerHelper.js:161:13)
         at testRoutes (/mnt/hgfs/Dropbox/projects/crypto/slickrun/ritvT.js:88:40)
         at RitvTestListServer.postStartup (/mnt/hgfs/Dropbox/projects/crypto/slickrun/ritvT.js:93:9)
         at Object.postStartupFx [as fx] (/mnt/hgfs/Dropbox/projects/crypto/slickrun/ritvT.js:74:18)
         at onPreviousInstanceRemoved (/mnt/hgfs/Dropbox/projects/crypto/node_modules/shelpers/lib/ExpressServerHelper.js:243:20)
         at Object.callIfDefined (/mnt/hgfs/Dropbox/projects/crypto/node_modules/shelpers/lib/shelpers.js:418:15)
         at attemptToStartServer (/mnt/hgfs/Dropbox/projects/crypto/node_modules/shelpers/lib/ExpressServerHelper.js:95:20)
         via asdf ....
         */
        function getStackTrace() {
            var err = new Error();
            return err.stack;
        }

        var stackTrace = getStackTrace()
        var calls = stackTrace.split("\n");
        var lineNumberWithPrototype = 5;
        //-= offset
        var trueCall = calls[lineNumberWithPrototype]
        //testRoutes (/mnt/hgfs/Dropbox/projects/crypto/slickrun/ritvT.js:88:40)
        var prototypeName = calls[lineNumberWithPrototype+1]
        //RitvTestListServer.postStartup (/mnt/hgfs/Dropbox/projects/crypto/slickrun/ritvT.js:93:9)

        var newError = 'Error \n'+calls.slice(lineNumberWithPrototype).join("\n")

        function getSecondPortion(s) {
            s = s.split("at ")[1];
            return s
        }

        trueCall = getSecondPortion(trueCall);
        prototypeName = getSecondPortion(prototypeName);

        function stripPrototype(s) {
            //FlexMXMLtoStyleExplorerConvertor.convertFile (C:\Users\user1\Dropbox\projects\crypto\proxy\css\convertMXMLSkinToExplorer.js:40:44)
            s = s.split(".")[0];
            return s
        }

        //LineProcHelper.getLineWith (C:\Users\user1\Dropbox\projects\crypto\proxy\css\convertMXMLSkinToExplorer.js:29:30)
        function getLinePrototype(s) {
            var methodCall = s.split(" (")[0] //LineProcHelper.getLineWith
            var prototype = methodCall.split(".")[0];
            var method = methodCall.split(".")[1];
            var line = "(" + s.split(" (")[1]; //(c:\)
            return {_prototype: prototype, method: method, line: line}
        }

        var resultObj = getLinePrototype(trueCall)
        var prototype = resultObj._prototype;
        var method = resultObj.method;
        var line = resultObj.line;
        prototypeName = stripPrototype(prototypeName);
        resultObj.newError = newError

        /**
         * Add a via line at botom of stack trace
         * TODO: organize differently, this is challening to understand
         * @param existingError
         */
        resultObj.fxVia = function fxVia(existingError) {
            //existingError +=  '\n via ' + calls[3]
            existingError +=  '\n \n \tvia:'
            existingError +=  '\n' + calls[3]
            return existingError;
        }

        return resultObj;

    }

    function reqPost2(opts) {
        if ( opts == null ) {
            throw new Error('Need Options');
        }
        var reqoptions = opts
        /*reqoptions.url = opts.url
         reqoptions.form = opts.form
         reqoptions.qs = opts.qs*/

        if ( opts.method != null ) {
            reqoptions.method = opts.method;
        }
        /*if ( opts.get ) {
         reqoptions.method = 'GET'
         } else {
         reqoptions.method = 'POST'
         }*/

        if ( opts.headers != null ) {
            /*sh.each(opts.headers, function copyHeader(i,x){
             reqoptions
             })*/
            reqoptions.headers = opts.headers;
        }

        var name = opts.name;
        var url = opts.url;


        var stackInfo = getStackInfo()
        name += ' ' + sh.paren(stackInfo._prototype + ' ' + stackInfo.line)
        var localRequest = request;
        if ( reqoptions.request != null ){
            localRequest = reqoptions.request;
        }
        var req = localRequest(reqoptions, function (error, response, body) {
            if ( response != null && body == null ) {
                body = response.body;
            }
            var e = new Error();
            if ( opts.silent != true ) {
                proc(name, reqoptions.url, response, error);
            }
            if ( opts.throwErrorOnStatusCode != null &&
                response.statusCode == opts.throwErrorOnStatusCode ) {
                console.error(name, 'throw error status code', response.statusCode)
                e.stack = getStackInfo().fxVia(stackInfo.newError); throw e;
            }

            if ( opts.throwErrorIfStatusCodeNotEqual != null &&
                response.statusCode != opts.throwErrorIfStatusCodeNotEqual ) {
                console.error(name, 'throwErrorIfStatusCodeNotEqual',url,
                    opts.throwErrorIfStatusCodeNotEqual, response.statusCode, body)
                //e.stack = stackInfo.newError;
                e.stack = getStackInfo().fxVia(stackInfo.newError); throw e;
            }

            if ( opts.bodyEqual ) {
                opts.bodyShouldEqual = opts.bodyEqual;
            }
            if (opts.bodyShouldEqual != null && opts.bodyShouldEqual != body  ){
                console.error(name, 'opts.bodyShouldEqual', opts.bodyShouldEqual ,'==', body)
                e.stack = getStackInfo().fxVia(stackInfo.newError); throw e;
            }

            if (opts.bodyNotEqual != null && opts.bodyNotEqual == body  ){
                console.error(name, 'opts.bodyNotEqual', opts.bodyNotEqual ,'==', body)
                e.stack = getStackInfo().fxVia(stackInfo.newError); throw e;
            }


            if ( opts.silent != true ) {
                var tab = "\t"
                if ( body != null && body.length > 500) {
                    proc(tab, opts.name, body.length);
                } else {
                    proc(tab, opts.name, body);
                }
            }
            if ( error != null ) {
                console.error(error);
            }
            if ( response == null ) {
                console.error('response is null');
            } else {
                if (response.statusCode == '404') {
                    console.error('404 for ', opts.name, body)
                }
                if (response.statusCode == '500') {
                    console.error('500 for ', opts.name, body)
                }

                //if ( opts.silent != true ) {
                    if (opts.showBody == true) {
                        console.log('\tbody contents:', body)
                    }
                //}
            }

            if ( opts.fx != null ) opts.fx()
            if ( opts.fx2 != null ) opts.fx2(body, response)



        })

        return req;
    }

    reqPost = reqPost2;
}//)();
defineUtilsX()

var TestHelper={}

/**
 * Gives quick request method to object
 * This method simplifies making a test request
 * TODO: there are 2 levels of delegation here. Simplify
 * @param p
 */
TestHelper.addQuickRequest = function addQuickRequest(p, baseUrl) {
    var types = {}
    types.GET = 'GET';
    types.POST = 'POST';

    p.testX = function testX() {
        var reqoptions = {}
        reqoptions.url = 'http://localhost:'+self.settings.port+'/changeEnv'
        reqoptions.form = {}
        reqoptions.method = 'GET'
        reqoptions.fx2 = function storeContents(body){
            console.log('test ok...')
        };
        reqoptions.name = 'test changeEnv'
        console.log('testing...')
        reqPost(reqoptions)
    }
    p.test2 = function test2() {
        var reqoptions = {}
        reqoptions.url = 'http://localhost:'+self.settings.port+'/post/jgrew'
        reqoptions.form = {}
        reqoptions.method = 'GET'
        reqoptions.showBody =  true;
        reqoptions.fx2 = function storeContents(body){
            console.log(reqoptions.url, 'test ok...')
        };
        reqoptions.name = 'test changeEnv'
        console.log('testing...')
        reqPost(reqoptions)
    }
    p.quickRequest = function quickRequest(url, method, fx, postData, doRegPost) {
        if ( method == null ) {
            method = types.GET
        }
        var reqoptions = {};
        if ( sh.endsWith(baseUrl, '/') && sh.startsWith(url, '/')) {
            url = url.slice(1); //remove first '/'
        }
        reqoptions.url = baseUrl+''+url;
        if ( postData == null ) { postData = {} }
        if ( method == types.POST || method == types.PUT ) {
            if ( doRegPost ) {
                reqoptions.form = postData
            } else {
                //reqoptions.json = true
                //reqoptions.body = "gg"
                reqoptions.json = true
                reqoptions.body = postData
            }
        } else {
            reqoptions.qs = postData
        }

        reqoptions.method = method
        reqoptions.showBody =  true;
        reqoptions.fx2 = function storeContents(body, resp){
            console.log(reqoptions.url, 'test ok...')
            try {
                body = JSON.parse(body)
            } catch ( e ) {

            }
            if ( fx ) {
                fx(body, resp)
            }
        };
        reqoptions.name = 'test ' + sh.paren(url)
        console.log('testing...')
        reqPost(reqoptions)
    }
}


exports.TestHelper = TestHelper;
exports.TestHelper.reqPost = reqPost;

exports.reqPost = reqPost;


exports.TestHelper.request = function makeNewRequest() {
//requestModule.jar()
    var request = requestModule.defaults({jar: false, followAllRedirect:true,
        followRedirect: true, rejectUnauthorized:false});

    return request;

}