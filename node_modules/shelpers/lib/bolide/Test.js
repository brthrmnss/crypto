/**
 * Created by smorris1 on 1/3/14.
 * Encapsulates all loigc for remote server
 */
var sh = require('shelpers').shelpers;
var Server = require('./BolideServer').BolideServer;
var Client = require('./BolideUIClient').BolideUIClient;

var type = {}
type.tasks  = {}
type.tasks.fiveSecTask = 'fiveSecTask'


if (module.parent == null) {


    //return; ///
    //create server
    var s = new Server();



    //loadSettings
    s.loadSettings();


    function defineTasks() {
        function VCommand2() {
            var p = VCommand2.prototype;
            var p = this;
            var self = this;

            self.name = 'some random command'
            self.settings = {}

            p.execute = function execute() {
                //self.data
                //self.success();
                setTimeout(function x () {
                    self.ok('555');
                    //only appliest during test...
                    try {
                        c.model = s.model;
                        c.updatedModel();
                    } catch ( e ) {}
                }, 5000)

                return;
            }
        }
        s.tasks.addTaskType('testTask3', VCommand2)
        s.tasks.addTaskType(type.tasks.fiveSecTask, VCommand2)
    }
    defineTasks();

    //on callback create client
    s.fxStarted = function onCreate(){
        console.log('on created')
        //client push to server
        var c = new Client();

        c.fxStarted =function onSettingsLoaded(){
            c.pullModel(step2);
        }

        c.loadSettings(

        );


        function step2(model){
            c.model.hi = 'dddddd'
            c.model.emptyT=[5]
            c.pushModel(step3, true);
        }


        function step3(model){
            c.model.hi = 'hhhhhhh'
            c.pullModel(step4, true);
        }

        function step4(model){
            console.log('model', c.model)
            testCreatingTask()
        }



        var testerData = {}
        function testCreatingTask(){
            var task = c.tasks.addTask(type.tasks.fiveSecTask,
                '...desc',
                function fiveSecTaskDone(){
                    console.log('callback 5 sec task done')
                }
            )
            testerData.fiveSecTaskId  =    task.id
            setTimeout(verifyTestCreatingTask, 5000)
            c.tasks.hasTask(testerData.fiveSecTaskId);
            c.pushModel(verifyTestCreatingTask, true);
        }


        function verifyTestCreatingTask(model){
            return;
            if ( c.tasks.isTaskDone(testerData.fiveSecTaskId) ) {
                console.log('task done....')
            } else {
                console.log('task not done....')
            }
            c.model.hi = false
            //c.pullModel(step4, true);
        }


    }


}



