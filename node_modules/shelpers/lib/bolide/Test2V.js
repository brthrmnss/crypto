/**
 * Created by smorris1 on 1/3/14.
 * Encapsulates all loigc for remote server
 */
var sh = require('shelpers').shelpers;
var Server = require('./BolideServer').BolideServer;
var Client = require('./BolideUIClient').BolideUIClient;

var type = {}
type.tasks  = {}
type.tasks.fiveSecTask = 'fiveSecTask'

var PromiseHelper = require('shelpers').PromiseHelper;
var OptionsHelper = require('shelpers').OptionsHelper
var SettingsHelper = require('shelpers').SettingsHelper
function TestCommunication() {

    var p = TestCommunication.prototype;
    p = this;
    var self = this;
    var achievements = [];
    self.achievements = achievements;


    p.loadConfig = function loadConfig(configFile) {

        self.go(configFile)
        return

        var defaultSettings = {};
        defaultSettings.dirDownload = null
        defaultSettings.throwErrorWhenQueryNotFound = false;
        var sH = new SettingsHelper();
        self.settingsHelper = sH;
        sH.defaultSettings = defaultSettings;

        //self.data.configFile = configFile;
        sH.loadOptions(configFile, function doneLoadingSettingsFile ( settings ){
            self.proc('options', settings)
            self.settings = settings;
            self.go( settings)
        }, ['c:/configs/, c:/trash', 'c:/trash/configs'])
    }

    self.go = function go(options) {

        var paramsHelper = new OptionsHelper();
        paramsHelper.loadOptions(options)
        // var fxCallback = paramsHelper.addOption('callback', 'completion callback', true)
        // var query = paramsHelper.addOption('query',
        //    'what torrent to look for', true)

        var token = sh.clone(options)
        self.token = token
        //token.query=query
        // token.fxCallback=fxCallback;

        var work = new PromiseHelper();
        work.name = 'Template Chain'
        work.wait = token.simulate==false;
        work.startChain(token)
            .add(self.createActors)
            .add(self.defineTasks)
            .add(self.waitStart)
            .add(self.basicTest)
            //.addWaitFor(function(){return token.finished})
           // .add(self.basicTest2)
            .add(self.verifyDontSendCommands)
            .add(self.testCreatingTask)
            .end();
    }

    function createComponents() {
        p.logic = {}
        /**
         * return urlMagnet
         * @param token
         * @param cb
         */
        p.logic.returnMagnetLink = function returnMagnetLink(token, cb) {
            self.proc(token.torrentName)
            cb()
            token.fxCallback(token.urlMagnet)

        }
    }
    createComponents();

    var c = null;
    var s = null;

    function defineWork() {
        p.defineTasks = function defineTasks(token, cb) {
            function VCommand2() {
                var p = VCommand2.prototype;
                var p = this;
                var self = this;

                self.name = 'some random command'
                self.settings = {}

                p.execute = function execute() {
                    //self.data
                    //self.success();
                    setTimeout(function x () {
                        self.ok('555');
                        //only appliest during test...
                        try {
                            c.model = s.model;
                            c.updatedModel();
                        } catch ( e ) {}
                    }, 5000)

                    return;
                }
            }
            self.VCommand2 = VCommand2;
            self.s.tasks.addTaskType('testTask3', VCommand2)
            self.s.tasks.addTaskType(type.tasks.fiveSecTask, VCommand2)
            cb()
        }
        p.createActors = function createActors(token, cb) {
            s = new Server();

            //loadSettings
            s.loadSettings();
            self.s = s;

            c = new Client();
            self.c = c;

            c.loadSettings(
            );
            cb( )
        }

        p.pullModel = function pullModel(token, cb) {
            cb( )
        }

        p.waitStart = function waitStart(token, cb) {

            token.i = setInterval(function tryAGain() {
                if (self.s.started ) {
                    clearInterval(token.i)
                    cb()
                    return;
                }
            },500)

        }


        p.basicTest = function basicTest(token, cb) {
            token.finished = false
            c.syncModel(step2);


            function step2(model) {
                c.model.hi = 'dddddd'
                c.model.emptyT = [5]
                c.syncModel(step3, true);
            }
            //step2();

            function step3(model) {
                c.model.hi = 'hhhhhhh'
                c.syncModel(step4, true);
            }

            function step4(model) {
                console.log('model', c.model)
                cb()
                token.finished = true
            }


        }
        p.verifyDontSendCommands = function verifyDontSendCommands(token, cb) {

            var UIOnlyTask = 'UIOnlyTask'


            var bail = false
            self.c.tasks.addTaskType(UIOnlyTask, self.VCommand2)
            var task = c.tasks.addTask(UIOnlyTask,
                '...desc',
                function fiveSecTaskDone(){
                    self.proc('UIOnlyTask', 'callback 5 sec task done')
                    if ( bail == true ){
                        return
                    }
                    cb()
                }
            , 'desc', self.c.settings.name)
            var result = c.syncModel(step2);
            if ( result != null ){
               // bail = true
                throw 'sent the file up....'
            }
            function step2(model) {
                //c.model.hi = 'dddddd'
              //  c.model.emptyT = [5]
               // c.syncModel(step3, true);
            }


        }
        var testerData = {}
        p.testCreatingTask = function testCreatingTask(token, cb) {

            function testCreatingTask(){
                var task = c.tasks.addTask(type.tasks.fiveSecTask,
                    'testCreatingTask',
                    function fiveSecTaskDone(){
                        console.log('callback 5 sec task done')
                        self.achievements.push('ran and tested a remote task')
                        cb()
                    }
                )
                testerData.fiveSecTaskId  =    task.id
                setTimeout(verifyTestCreatingTask, 5000)
                c.tasks.hasTask(testerData.fiveSecTaskId);
                //c.syncModel(verifyTestCreatingTask, true);
                c.syncContinually(1, verifyTestCreatingTask)
            }

            testCreatingTask();


            function verifyTestCreatingTask(model){
                return;
                if ( c.tasks.isTaskDone(testerData.fiveSecTaskId) ) {
                    console.log('task done....')
                } else {
                    console.log('task not done....')
                }
                c.model.hi = false
                //c.pullModel(step4, true);
            }
        }
    }
    defineWork()

    function defineUtils() {
        p.utils = {}
    }

    defineUtils();

    /**
     * Receive log commands in special format
     */
    p.proc = function proc() {
        sh.sLog(arguments)
    }
}

if (module.parent == null) {


    var t = new TestCommunication()
    var options = {}
    t.loadConfig(options);
    return; ///
    //create server
    var s = new Server();

    //loadSettings
    s.loadSettings();


    function defineTasks() {

    }
    defineTasks();

    //on callback create client
    s.fxStarted = function onCreate(){
        console.log('on created')
        //client push to server
        var c = new Client();

        c.fxStarted =function onSettingsLoaded(){
            c.pullModel(step2);
        }

        c.loadSettings(

        );


        function step2(model){
            c.model.hi = 'dddddd'
            c.model.emptyT=[5]
            c.syncModel(step3, true);
        }


        function step3(model){
            c.model.hi = 'hhhhhhh'
            c.syncModel(step4, true);
        }

        function step4(model){
            console.log('model', c.model)
            testCreatingTask()
        }



        var testerData = {}
        function testCreatingTask(){
            var task = c.tasks.addTask(type.tasks.fiveSecTask,
                '...desc',
                function fiveSecTaskDone(){
                    console.log('callback 5 sec task done')
                }
            )
            testerData.fiveSecTaskId  =    task.id
            setTimeout(verifyTestCreatingTask, 5000)
            c.tasks.hasTask(testerData.fiveSecTaskId);
            c.syncModel(verifyTestCreatingTask, true);
        }


        function verifyTestCreatingTask(model){
            return;
            if ( c.tasks.isTaskDone(testerData.fiveSecTaskId) ) {
                console.log('task done....')
            } else {
                console.log('task not done....')
            }
            c.model.hi = false
            //c.pullModel(step4, true);
        }


    }


}



