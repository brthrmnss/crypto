var shelpers = require('shelpers')
var sh = shelpers.shelpers;


function IdModelHelper() {
    var self = this;
    var p  = this;
    self.settings = {} //global settings for model
    p.load = function load(settings) {
        var model = settings.model;
        var name = settings.name;

        self.name = name;
        self.records = model;

        self.settings = settings;

        if ( self.settings.doDefault == null) {
            self.settings.doDefault = true;
        }

        if ( self.settings.doDefault ) {
            self.dict = {}
            for (var i = 0; i < self.records.length; i++) {
                var r = self.records[i];
                self.dict[r.id] = r;
            }
            self.nextId = self.records.length; //-1;
        }

        console.log('making model', name)

        if ( self.settings.file != null ) {
            if ( sh.fileExists(self.settings.file) && self.settings.reset != true ) {
                self.records = JSON.parse(sh.readFile(self.settings.file));
            } else {
                sh.writeFile(self.settings.file,
                    sh.toJSONString(self.records));
            }
            function getHighest() {

            }
            var highest = 0;
            sh.each(self.records, function getHighestId(i, obj){
                if ( obj.id > highest ) {
                    highest = obj.id
                }
            })
            self.nextId = highest;
        }

        //list
        rest.get('/api/'+self.name+'', function(req, rest) {
            if ( self.settings.fxList != null ) {
                self.settings.fxList(rest.ok, req, rest)
                return;
            }

            rest.ok(self.records);
        });

        rest.get('/api/'+self.name+'/create', createItem);
        //get
        rest.get('/api/'+self.name+'/:id', function(req, rest) {

            if ( self.settings.fxGet != null ) {
                self.settings.fxGet(req.params.id, rest.ok, req, rest)
                return;
            }

            var record = self.dict[req.params.id];
            if (record) rest.ok(record);
            else rest.notFound();
        });

        //update
        rest.put('/api/'+self.name+'/:id', function(req, rest) {

            if ( self.settings.fxUpdate != null ) {
                self.settings.fxUpdate(req.params.id, rest.accepted, req, rest)
                return;
            }

            var id = parseInt(req.params.id)
            var exists = self.dict[id] != null;
            if ( exists == false ) {
                self.records.push(req.body)
            }
            self.dict[req.params.id] = req.body;

            return rest.accepted('/api/'+self.name+'/' + encodeURI(req.params.id));
        });

        //create
        rest.post('/api/'+self.name, createItem);
        function createItem (req, rest) {
            if ( self.settings.fxNew != null ) {
                //send params
                self.settings.fxNew(req.params, rest.created, req, rest)
                return;
            }
            var types = {}
            types.GET = 'GET';
            var params = req.params;
            if (req.method == types.GET) {
                params = req.query;
                if ( params.obj != null ) {
                    params = JSON.parse(params.obj);
                }
            }
            var exists = self.dict[params.id] == null;
            if ( exists ) {
                throw new Error('record exists');
                self.records.push(req.body)
            }
            self.nextId++
            if ( isPost ) {
                req.body.id = self.nextId
                self.records.push(req.body)
                self.dict[req.params.id] = req.body;
            } else {
                params.id = self.nextId
                self.records.push(params);
                self.dict[params.id] = params;
            }

            rest.created('/api/'+self.name+'/' + (records.length - 1));
        }

        //delete
        rest.delete('/api/'+self.name+'/:id', function(req, rest) {
            // delete self.records[req.params.id];

            if ( self.settings.fxDelete != null ) {
                self.settings.fxDelete(req.params.id, rest.gone, req, rest)
                return;
            }

            for ( var i = 0 ; i < self.records.length; i++) {
                var r = self.records[i];
                if (r.id = req.params.id ) {
                    self.records.splice(i, 1);
                    break;
                }
            }
            delete self.dict[req.params.id];

            rest.gone();
        })
    }



}

exports.RestHelper = IdModelHelper;

if ( module.parent == null ) {

    var express = require('express'),
        expressRest = require('express-rest');

    var app = express();
    var rest = expressRest(app);
    //var cors = require('cors')
    //CORS middleware
    var allowCrossDomain = function(req, res, next) {
        res.header('Access-Control-Allow-Origin', 'example.com');
        res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
        res.header('Access-Control-Allow-Headers', 'Content-Type');

        next();
    }

    var records = [
        {value: 'Apple'},
        {value: 'Banana'}
    ];

    rest.get('/api/food', function(req, rest) {
        rest.ok(records);
    });

    rest.get('/api/food/:id', function(req, rest) {
        var record = records[req.params.id];
        if (record) rest.ok(record);
        else rest.notFound();
    });

    rest.put('/api/food/:id', function(req, rest) {
        records[req.params.id] = req.body;
        return rest.accepted('/api/food/' + encodeURI(req.params.id));
    });

    rest.post('/api/food', function(req, rest) {
        records.push(req.body);
        rest.created('/api/food/' + (records.length - 1));
    });

    rest.delete('/api/food/:id', function(req, rest) {
        delete records[req.params.id];
        rest.gone();
    })


    var tasks = new IdModelHelper();
    var taskApiSettings = {}
    var initTasks = [] ;
    initTasks.push({id:0, name:'Complete Car'})
    initTasks.push({id:1, name:'Complete House'})
    taskApiSettings.model = initTasks
    taskApiSettings.name = 'tasks'
    taskApiSettings.file = 'rest_helper/tasks.json'
    var tS = taskApiSettings;
    tS.createGetPostRoutes = true;
    tS.requiredFields = {name:""}
    tS.reset = false;
    tasks.load(taskApiSettings)


    app.use(function(req, res, next) {
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        next();
    })
    //app.use(cors())
    app.use(allowCrossDomain);
    app.listen(5001);


    var TestHelper = shelpers.TestHelper;
    var reqPost = TestHelper.reqPost;


    var self = {}
    self.settings = {}
    self.settings.port = 5001;

    var types = {};
    types.POST = 'POST'
    types.GET = 'GET'

    function test() {

        self.quickRequest = function quickRequest(url, method, fx, postData) {
            if ( method == null ) {
                method = types.GET
            }
            var reqoptions = {}
            reqoptions.url = 'http://localhost:'+self.settings.port+'/'+url
            if ( postData == null ) { postData = {} }
            if ( method == types.POST ) {
                reqoptions.form = postData
            } else {
                reqoptions.qs = postData
            }

            reqoptions.method = method
            reqoptions.showBody =  true;
            reqoptions.fx2 = function storeContents(body){
                console.log(reqoptions.url, 'test ok...')
            };
            reqoptions.name = 'test ' + sh.paren(url)
            console.log('testing...')
            reqPost(reqoptions)
        }
        //create task
        //list tasks
        //show all tasks
        //create task via put
        //create task

        self.quickRequest('api/tasks', 'get', null, {user_id:"6"})


        self.quickRequest('api/tasks/create', 'get', null, {name:"randomTask"})

    }

    test();

}

